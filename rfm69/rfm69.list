
rfm69.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 08 00 20 e5 13 00 08 e3 13 00 08 e1 13 00 08     ... ............
	...
 800002c:	e3 13 00 08 00 00 00 00 00 00 00 00 e3 13 00 08     ................
 800003c:	b5 03 00 08 e1 13 00 08 e1 13 00 08 e1 13 00 08     ................
 800004c:	e1 13 00 08 e1 13 00 08 e1 13 00 08 c5 03 00 08     ................
 800005c:	e1 13 00 08 e1 13 00 08 e1 13 00 08 e1 13 00 08     ................
 800006c:	e1 13 00 08 e1 13 00 08 e1 13 00 08 e1 13 00 08     ................
 800007c:	e1 13 00 08 e1 13 00 08 e1 13 00 08 e1 13 00 08     ................
 800008c:	e1 13 00 08 e1 13 00 08 e1 13 00 08 e1 13 00 08     ................
 800009c:	e1 13 00 08 e1 13 00 08 e1 13 00 08 e1 13 00 08     ................
 80000ac:	e1 13 00 08 e1 13 00 08 e1 13 00 08 e1 13 00 08     ................
 80000bc:	e1 13 00 08                                         ....

080000c0 <ftoa>:
  i2c_enable_stretching(I2C1);
  i2c_set_7bit_addr_mode(I2C1);
  i2c_peripheral_enable(I2C1);
}

static void ftoa(float Value, char *Buffer) {
 80000c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80000c2:	b083      	sub	sp, #12
 80000c4:	000e      	movs	r6, r1
  char frac_part[3];
  int i, count = 0;

  helper.f = Value;
  // mantissa is LS 23 bits
  mantissa = helper.mantissa_lo;
 80000c6:	b282      	uxth	r2, r0
  mantissa += ((unsigned long)helper.mantissa_hi << 16);
 80000c8:	0243      	lsls	r3, r0, #9
 80000ca:	0e5b      	lsrs	r3, r3, #25
 80000cc:	041b      	lsls	r3, r3, #16
 80000ce:	189b      	adds	r3, r3, r2
  // add the 24th bit to get 1.mmmm^eeee format
  mantissa += 0x00800000;
 80000d0:	2280      	movs	r2, #128	; 0x80
 80000d2:	0412      	lsls	r2, r2, #16
 80000d4:	189d      	adds	r5, r3, r2
  // exponent is biased by 127
  exponent = (signed char)helper.exponent - 127;
 80000d6:	0044      	lsls	r4, r0, #1
 80000d8:	0e24      	lsrs	r4, r4, #24
 80000da:	3c7f      	subs	r4, #127	; 0x7f
 80000dc:	b264      	sxtb	r4, r4

  // too big to shove into 8 chars
  if (exponent > 18) {
 80000de:	2c12      	cmp	r4, #18
 80000e0:	dc14      	bgt.n	800010c <ftoa+0x4c>
    Buffer[3] = '\0';
    return;
  }

  // too small to resolve (resolution of 1/8)
  if (exponent < -3) {
 80000e2:	1ce3      	adds	r3, r4, #3
 80000e4:	db1c      	blt.n	8000120 <ftoa+0x60>
  }

  count = 0;

  // add negative sign (if applicable)
  if (helper.sign) {
 80000e6:	2800      	cmp	r0, #0
 80000e8:	db1f      	blt.n	800012a <ftoa+0x6a>
  count = 0;
 80000ea:	2700      	movs	r7, #0
    Buffer[0] = '-';
    count++;
  }

  // get the integer part
  int_part = mantissa >> (23 - exponent);
 80000ec:	2317      	movs	r3, #23
 80000ee:	1b1b      	subs	r3, r3, r4
 80000f0:	0028      	movs	r0, r5
 80000f2:	40d8      	lsrs	r0, r3
  // convert to string
  itoa(int_part, &Buffer[count], 10);
 80000f4:	19f1      	adds	r1, r6, r7
 80000f6:	220a      	movs	r2, #10
 80000f8:	f001 fa3a 	bl	8001570 <itoa>

  // find the end of the integer
  for (i = 0; i < 8; i++)
 80000fc:	2300      	movs	r3, #0
 80000fe:	2b07      	cmp	r3, #7
 8000100:	dc18      	bgt.n	8000134 <ftoa+0x74>
    if (Buffer[i] == '\0') {
 8000102:	5cf2      	ldrb	r2, [r6, r3]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d014      	beq.n	8000132 <ftoa+0x72>
  for (i = 0; i < 8; i++)
 8000108:	3301      	adds	r3, #1
 800010a:	e7f8      	b.n	80000fe <ftoa+0x3e>
    Buffer[0] = 'I';
 800010c:	2349      	movs	r3, #73	; 0x49
 800010e:	700b      	strb	r3, [r1, #0]
    Buffer[1] = 'n';
 8000110:	3325      	adds	r3, #37	; 0x25
 8000112:	704b      	strb	r3, [r1, #1]
    Buffer[2] = 'f';
 8000114:	3b08      	subs	r3, #8
 8000116:	708b      	strb	r3, [r1, #2]
    Buffer[3] = '\0';
 8000118:	2300      	movs	r3, #0
 800011a:	70cb      	strb	r3, [r1, #3]
    if (count < 7)
      Buffer[count++] = frac_part[i];

  // make sure the output is terminated
  Buffer[count] = '\0';
}
 800011c:	b003      	add	sp, #12
 800011e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Buffer[0] = '0';
 8000120:	2330      	movs	r3, #48	; 0x30
 8000122:	700b      	strb	r3, [r1, #0]
    Buffer[1] = '\0';
 8000124:	2300      	movs	r3, #0
 8000126:	704b      	strb	r3, [r1, #1]
    return;
 8000128:	e7f8      	b.n	800011c <ftoa+0x5c>
    Buffer[0] = '-';
 800012a:	232d      	movs	r3, #45	; 0x2d
 800012c:	700b      	strb	r3, [r1, #0]
    count++;
 800012e:	2701      	movs	r7, #1
 8000130:	e7dc      	b.n	80000ec <ftoa+0x2c>
      count = i;
 8000132:	001f      	movs	r7, r3
  if (count > 5)
 8000134:	2f05      	cmp	r7, #5
 8000136:	dcf1      	bgt.n	800011c <ftoa+0x5c>
  Buffer[count++] = '.';
 8000138:	1c79      	adds	r1, r7, #1
 800013a:	232e      	movs	r3, #46	; 0x2e
 800013c:	55f3      	strb	r3, [r6, r7]
  switch (0x7 & (mantissa >> (20 - exponent))) {
 800013e:	3b1a      	subs	r3, #26
 8000140:	1b1c      	subs	r4, r3, r4
 8000142:	002b      	movs	r3, r5
 8000144:	40e3      	lsrs	r3, r4
 8000146:	2507      	movs	r5, #7
 8000148:	402b      	ands	r3, r5
 800014a:	2b07      	cmp	r3, #7
 800014c:	d808      	bhi.n	8000160 <ftoa+0xa0>
 800014e:	009b      	lsls	r3, r3, #2
 8000150:	4a27      	ldr	r2, [pc, #156]	; (80001f0 <ftoa+0x130>)
 8000152:	58d3      	ldr	r3, [r2, r3]
 8000154:	469f      	mov	pc, r3
    frac_part[0] = '0';
 8000156:	ab01      	add	r3, sp, #4
 8000158:	2230      	movs	r2, #48	; 0x30
 800015a:	701a      	strb	r2, [r3, #0]
    frac_part[1] = '0';
 800015c:	705a      	strb	r2, [r3, #1]
    frac_part[2] = '0';
 800015e:	709a      	strb	r2, [r3, #2]
      Buffer[count++] = frac_part[i];
 8000160:	2300      	movs	r3, #0
 8000162:	e037      	b.n	80001d4 <ftoa+0x114>
    frac_part[0] = '1';
 8000164:	ab01      	add	r3, sp, #4
 8000166:	2231      	movs	r2, #49	; 0x31
 8000168:	701a      	strb	r2, [r3, #0]
    frac_part[1] = '2';
 800016a:	3201      	adds	r2, #1
 800016c:	705a      	strb	r2, [r3, #1]
    frac_part[2] = '5';
 800016e:	3203      	adds	r2, #3
 8000170:	709a      	strb	r2, [r3, #2]
    break;
 8000172:	e7f5      	b.n	8000160 <ftoa+0xa0>
    frac_part[0] = '2';
 8000174:	ab01      	add	r3, sp, #4
 8000176:	2232      	movs	r2, #50	; 0x32
 8000178:	701a      	strb	r2, [r3, #0]
    frac_part[1] = '5';
 800017a:	3203      	adds	r2, #3
 800017c:	705a      	strb	r2, [r3, #1]
    frac_part[2] = '0';
 800017e:	3a05      	subs	r2, #5
 8000180:	709a      	strb	r2, [r3, #2]
    break;
 8000182:	e7ed      	b.n	8000160 <ftoa+0xa0>
    frac_part[0] = '3';
 8000184:	ab01      	add	r3, sp, #4
 8000186:	2233      	movs	r2, #51	; 0x33
 8000188:	701a      	strb	r2, [r3, #0]
    frac_part[1] = '7';
 800018a:	3204      	adds	r2, #4
 800018c:	705a      	strb	r2, [r3, #1]
    frac_part[2] = '5';
 800018e:	3a02      	subs	r2, #2
 8000190:	709a      	strb	r2, [r3, #2]
    break;
 8000192:	e7e5      	b.n	8000160 <ftoa+0xa0>
    frac_part[0] = '5';
 8000194:	ab01      	add	r3, sp, #4
 8000196:	2235      	movs	r2, #53	; 0x35
 8000198:	701a      	strb	r2, [r3, #0]
    frac_part[1] = '0';
 800019a:	3a05      	subs	r2, #5
 800019c:	705a      	strb	r2, [r3, #1]
    frac_part[2] = '0';
 800019e:	709a      	strb	r2, [r3, #2]
    break;
 80001a0:	e7de      	b.n	8000160 <ftoa+0xa0>
    frac_part[0] = '6';
 80001a2:	ab01      	add	r3, sp, #4
 80001a4:	2236      	movs	r2, #54	; 0x36
 80001a6:	701a      	strb	r2, [r3, #0]
    frac_part[1] = '2';
 80001a8:	3a04      	subs	r2, #4
 80001aa:	705a      	strb	r2, [r3, #1]
    frac_part[2] = '5';
 80001ac:	3203      	adds	r2, #3
 80001ae:	709a      	strb	r2, [r3, #2]
    break;
 80001b0:	e7d6      	b.n	8000160 <ftoa+0xa0>
    frac_part[0] = '7';
 80001b2:	ab01      	add	r3, sp, #4
 80001b4:	2237      	movs	r2, #55	; 0x37
 80001b6:	701a      	strb	r2, [r3, #0]
    frac_part[1] = '5';
 80001b8:	3a02      	subs	r2, #2
 80001ba:	705a      	strb	r2, [r3, #1]
    frac_part[2] = '0';
 80001bc:	3a05      	subs	r2, #5
 80001be:	709a      	strb	r2, [r3, #2]
    break;
 80001c0:	e7ce      	b.n	8000160 <ftoa+0xa0>
    frac_part[0] = '8';
 80001c2:	ab01      	add	r3, sp, #4
 80001c4:	2238      	movs	r2, #56	; 0x38
 80001c6:	701a      	strb	r2, [r3, #0]
    frac_part[1] = '7';
 80001c8:	3a01      	subs	r2, #1
 80001ca:	705a      	strb	r2, [r3, #1]
    frac_part[2] = '5';
 80001cc:	3a02      	subs	r2, #2
 80001ce:	709a      	strb	r2, [r3, #2]
    break;
 80001d0:	e7c6      	b.n	8000160 <ftoa+0xa0>
  for (i = 0; i < 3; i++)
 80001d2:	3301      	adds	r3, #1
 80001d4:	2b02      	cmp	r3, #2
 80001d6:	dc06      	bgt.n	80001e6 <ftoa+0x126>
    if (count < 7)
 80001d8:	2906      	cmp	r1, #6
 80001da:	dcfa      	bgt.n	80001d2 <ftoa+0x112>
      Buffer[count++] = frac_part[i];
 80001dc:	aa01      	add	r2, sp, #4
 80001de:	5cd2      	ldrb	r2, [r2, r3]
 80001e0:	5472      	strb	r2, [r6, r1]
 80001e2:	3101      	adds	r1, #1
 80001e4:	e7f5      	b.n	80001d2 <ftoa+0x112>
  Buffer[count] = '\0';
 80001e6:	1876      	adds	r6, r6, r1
 80001e8:	2300      	movs	r3, #0
 80001ea:	7033      	strb	r3, [r6, #0]
 80001ec:	e796      	b.n	800011c <ftoa+0x5c>
 80001ee:	46c0      	nop			; (mov r8, r8)
 80001f0:	0800194c 	.word	0x0800194c

080001f4 <clock_setup>:
static void clock_setup(void) {
 80001f4:	b510      	push	{r4, lr}
  rcc_set_hpre(RCC_CFGR_HPRE_NODIV);
 80001f6:	2000      	movs	r0, #0
 80001f8:	f001 f88e 	bl	8001318 <rcc_set_hpre>
  rcc_set_ppre1(RCC_CFGR_PPRE1_NODIV);
 80001fc:	2000      	movs	r0, #0
 80001fe:	f001 f873 	bl	80012e8 <rcc_set_ppre1>
  rcc_set_ppre2(RCC_CFGR_PPRE2_NODIV);
 8000202:	2000      	movs	r0, #0
 8000204:	f001 f87c 	bl	8001300 <rcc_set_ppre2>
  rcc_periph_clock_enable(RCC_GPIOA);
 8000208:	20b0      	movs	r0, #176	; 0xb0
 800020a:	00c0      	lsls	r0, r0, #3
 800020c:	f001 f88e 	bl	800132c <rcc_periph_clock_enable>
  rcc_periph_clock_enable(RCC_SYSCFG);
 8000210:	20d0      	movs	r0, #208	; 0xd0
 8000212:	00c0      	lsls	r0, r0, #3
 8000214:	f001 f88a 	bl	800132c <rcc_periph_clock_enable>
  systick_set_clocksource(STK_CSR_CLKSOURCE_AHB); // 2.097MHz (?)
 8000218:	2004      	movs	r0, #4
 800021a:	f001 f92f 	bl	800147c <systick_set_clocksource>
  systick_set_reload((2097*1)-1); // 2.097MHz / 2097 = 1000 overflows per second - every 1ms one interrupt.
 800021e:	2083      	movs	r0, #131	; 0x83
 8000220:	0100      	lsls	r0, r0, #4
 8000222:	f001 f923 	bl	800146c <systick_set_reload>
  systick_clear();
 8000226:	f001 f943 	bl	80014b0 <systick_clear>
  systick_interrupt_enable();
 800022a:	f001 f931 	bl	8001490 <systick_interrupt_enable>
  systick_counter_enable();
 800022e:	f001 f937 	bl	80014a0 <systick_counter_enable>
  rcc_periph_clock_enable(RCC_SPI1);
 8000232:	4803      	ldr	r0, [pc, #12]	; (8000240 <clock_setup+0x4c>)
 8000234:	f001 f87a 	bl	800132c <rcc_periph_clock_enable>
  rcc_periph_clock_enable(RCC_I2C1);
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <clock_setup+0x50>)
 800023a:	f001 f877 	bl	800132c <rcc_periph_clock_enable>
}
 800023e:	bd10      	pop	{r4, pc}
 8000240:	0000068c 	.word	0x0000068c
 8000244:	00000715 	.word	0x00000715

08000248 <spi_setup>:
static void spi_setup(void) {
 8000248:	b530      	push	{r4, r5, lr}
 800024a:	b083      	sub	sp, #12
  gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO7 | GPIO5 | GPIO6);
 800024c:	25a0      	movs	r5, #160	; 0xa0
 800024e:	05ed      	lsls	r5, r5, #23
 8000250:	23e0      	movs	r3, #224	; 0xe0
 8000252:	2200      	movs	r2, #0
 8000254:	2102      	movs	r1, #2
 8000256:	0028      	movs	r0, r5
 8000258:	f000 fea9 	bl	8000fae <gpio_mode_setup>
  gpio_mode_setup(GPIOA, GPIO_MODE_OUTPUT, GPIO_PUPD_PULLUP, GPIO4);
 800025c:	2310      	movs	r3, #16
 800025e:	2201      	movs	r2, #1
 8000260:	2101      	movs	r1, #1
 8000262:	0028      	movs	r0, r5
 8000264:	f000 fea3 	bl	8000fae <gpio_mode_setup>
  gpio_set_af(GPIOA, GPIO_AF0, GPIO5 | GPIO6 | GPIO7);
 8000268:	22e0      	movs	r2, #224	; 0xe0
 800026a:	2100      	movs	r1, #0
 800026c:	0028      	movs	r0, r5
 800026e:	f000 fedc 	bl	800102a <gpio_set_af>
  spi_reset(SPI1);
 8000272:	4c0c      	ldr	r4, [pc, #48]	; (80002a4 <spi_setup+0x5c>)
 8000274:	0020      	movs	r0, r4
 8000276:	f001 f877 	bl	8001368 <spi_reset>
  spi_init_master(SPI1, SPI_CR1_BAUDRATE_FPCLK_DIV_16, SPI_CR1_CPOL_CLK_TO_0_WHEN_IDLE, SPI_CR1_CPHA_CLK_TRANSITION_1, SPI_CR1_DFF_8BIT, SPI_CR1_MSBFIRST);
 800027a:	2300      	movs	r3, #0
 800027c:	9301      	str	r3, [sp, #4]
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	2200      	movs	r2, #0
 8000282:	2118      	movs	r1, #24
 8000284:	0020      	movs	r0, r4
 8000286:	f001 f897 	bl	80013b8 <spi_init_master>
  spi_enable_ss_output(SPI1);
 800028a:	0020      	movs	r0, r4
 800028c:	f001 f88f 	bl	80013ae <spi_enable_ss_output>
  gpio_set(GPIOA, GPIO4);
 8000290:	2110      	movs	r1, #16
 8000292:	0028      	movs	r0, r5
 8000294:	f000 fe86 	bl	8000fa4 <gpio_set>
  spi_enable(SPI1);
 8000298:	0020      	movs	r0, r4
 800029a:	f001 f87b 	bl	8001394 <spi_enable>
}
 800029e:	b003      	add	sp, #12
 80002a0:	bd30      	pop	{r4, r5, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	40013000 	.word	0x40013000

080002a8 <gpio_setup>:
static void gpio_setup(void) {
 80002a8:	b510      	push	{r4, lr}
  gpio_mode_setup(GPIOA, GPIO_MODE_INPUT, GPIO_PUPD_NONE, GPIO3);
 80002aa:	24a0      	movs	r4, #160	; 0xa0
 80002ac:	05e4      	lsls	r4, r4, #23
 80002ae:	2308      	movs	r3, #8
 80002b0:	2200      	movs	r2, #0
 80002b2:	2100      	movs	r1, #0
 80002b4:	0020      	movs	r0, r4
 80002b6:	f000 fe7a 	bl	8000fae <gpio_mode_setup>
  nvic_enable_irq(NVIC_EXTI2_3_IRQ);
 80002ba:	2006      	movs	r0, #6
 80002bc:	f001 f8fe 	bl	80014bc <nvic_enable_irq>
  exti_select_source(EXTI3, GPIOA);
 80002c0:	0021      	movs	r1, r4
 80002c2:	2008      	movs	r0, #8
 80002c4:	f000 fe34 	bl	8000f30 <exti_select_source>
  exti_set_trigger(EXTI3, EXTI_TRIGGER_RISING);
 80002c8:	2100      	movs	r1, #0
 80002ca:	2008      	movs	r0, #8
 80002cc:	f000 fdfc 	bl	8000ec8 <exti_set_trigger>
   exti_enable_request(EXTI3);
 80002d0:	2008      	movs	r0, #8
 80002d2:	f000 fe19 	bl	8000f08 <exti_enable_request>
  nvic_clear_pending_irq(NVIC_EXTI2_3_IRQ);
 80002d6:	2006      	movs	r0, #6
 80002d8:	f001 f908 	bl	80014ec <nvic_clear_pending_irq>
  nvic_set_priority(NVIC_EXTI2_3_IRQ, 2);
 80002dc:	2102      	movs	r1, #2
 80002de:	2006      	movs	r0, #6
 80002e0:	f001 f910 	bl	8001504 <nvic_set_priority>
}
 80002e4:	bd10      	pop	{r4, pc}
	...

080002e8 <i2c_setup>:
static void i2c_setup(void) {
 80002e8:	b570      	push	{r4, r5, r6, lr}
  i2c_reset(I2C1);
 80002ea:	4c17      	ldr	r4, [pc, #92]	; (8000348 <i2c_setup+0x60>)
 80002ec:	0020      	movs	r0, r4
 80002ee:	f000 fec9 	bl	8001084 <i2c_reset>
  gpio_mode_setup(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO9 | GPIO10);
 80002f2:	26c0      	movs	r6, #192	; 0xc0
 80002f4:	00f6      	lsls	r6, r6, #3
 80002f6:	25a0      	movs	r5, #160	; 0xa0
 80002f8:	05ed      	lsls	r5, r5, #23
 80002fa:	0033      	movs	r3, r6
 80002fc:	2200      	movs	r2, #0
 80002fe:	2102      	movs	r1, #2
 8000300:	0028      	movs	r0, r5
 8000302:	f000 fe54 	bl	8000fae <gpio_mode_setup>
  gpio_set_output_options(GPIOA, GPIO_OTYPE_OD, GPIO_OSPEED_HIGH, GPIO9 | GPIO10);
 8000306:	0033      	movs	r3, r6
 8000308:	2202      	movs	r2, #2
 800030a:	2101      	movs	r1, #1
 800030c:	0028      	movs	r0, r5
 800030e:	f000 fe6e 	bl	8000fee <gpio_set_output_options>
  gpio_set_af(GPIOA, GPIO_AF1, GPIO9 | GPIO10);
 8000312:	0032      	movs	r2, r6
 8000314:	2101      	movs	r1, #1
 8000316:	0028      	movs	r0, r5
 8000318:	f000 fe87 	bl	800102a <gpio_set_af>
  i2c_reset(I2C1);
 800031c:	0020      	movs	r0, r4
 800031e:	f000 feb1 	bl	8001084 <i2c_reset>
  i2c_peripheral_disable(I2C1);
 8000322:	0020      	movs	r0, r4
 8000324:	f000 fed1 	bl	80010ca <i2c_peripheral_disable>
  i2c_set_speed(I2C1, i2c_speed_sm_100k, 2);  // Actually 2.097MHz, that that doesn't seem to be an option
 8000328:	2202      	movs	r2, #2
 800032a:	2100      	movs	r1, #0
 800032c:	0020      	movs	r0, r4
 800032e:	f000 ffac 	bl	800128a <i2c_set_speed>
  i2c_enable_stretching(I2C1);
 8000332:	0020      	movs	r0, r4
 8000334:	f000 ff00 	bl	8001138 <i2c_enable_stretching>
  i2c_set_7bit_addr_mode(I2C1);
 8000338:	0020      	movs	r0, r4
 800033a:	f000 ff05 	bl	8001148 <i2c_set_7bit_addr_mode>
  i2c_peripheral_enable(I2C1);
 800033e:	0020      	movs	r0, r4
 8000340:	f000 febe 	bl	80010c0 <i2c_peripheral_enable>
}
 8000344:	bd70      	pop	{r4, r5, r6, pc}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	40005400 	.word	0x40005400

0800034c <SPI_transfer8Bit>:
extern uint8_t SPI_transfer8Bit(uint8_t tx) {
 800034c:	b510      	push	{r4, lr}
  return spi_xfer(SPI1, tx);
 800034e:	0001      	movs	r1, r0
 8000350:	4802      	ldr	r0, [pc, #8]	; (800035c <SPI_transfer8Bit+0x10>)
 8000352:	f001 f824 	bl	800139e <spi_xfer>
 8000356:	b2c0      	uxtb	r0, r0
}
 8000358:	bd10      	pop	{r4, pc}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	40013000 	.word	0x40013000

08000360 <spi_transfer>:
extern uint8_t spi_transfer(uint8_t tx) { return spi_xfer(SPI1, tx); }
 8000360:	b510      	push	{r4, lr}
 8000362:	0001      	movs	r1, r0
 8000364:	4802      	ldr	r0, [pc, #8]	; (8000370 <spi_transfer+0x10>)
 8000366:	f001 f81a 	bl	800139e <spi_xfer>
 800036a:	b2c0      	uxtb	r0, r0
 800036c:	bd10      	pop	{r4, pc}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	40013000 	.word	0x40013000

08000374 <HAL_GetTick>:
  return sys_tick_timer;
 8000374:	4b01      	ldr	r3, [pc, #4]	; (800037c <HAL_GetTick+0x8>)
 8000376:	6818      	ldr	r0, [r3, #0]
}
 8000378:	4770      	bx	lr
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	20000000 	.word	0x20000000

08000380 <noInterrupts>:
extern void noInterrupts(void) {
 8000380:	b510      	push	{r4, lr}
   nvic_disable_irq(NVIC_EXTI2_3_IRQ);
 8000382:	2006      	movs	r0, #6
 8000384:	f001 f8a6 	bl	80014d4 <nvic_disable_irq>
}
 8000388:	bd10      	pop	{r4, pc}

0800038a <interrupts>:
extern void interrupts(void) {
 800038a:	b510      	push	{r4, lr}
  nvic_enable_irq(NVIC_EXTI2_3_IRQ);
 800038c:	2006      	movs	r0, #6
 800038e:	f001 f895 	bl	80014bc <nvic_enable_irq>
}
 8000392:	bd10      	pop	{r4, pc}

08000394 <RFM69_setCSPin>:
extern void RFM69_setCSPin(bool state) {
 8000394:	b510      	push	{r4, lr}
  if (state == true) {
 8000396:	2800      	cmp	r0, #0
 8000398:	d005      	beq.n	80003a6 <RFM69_setCSPin+0x12>
    gpio_set(GPIOA, GPIO4);
 800039a:	20a0      	movs	r0, #160	; 0xa0
 800039c:	2110      	movs	r1, #16
 800039e:	05c0      	lsls	r0, r0, #23
 80003a0:	f000 fe00 	bl	8000fa4 <gpio_set>
}
 80003a4:	bd10      	pop	{r4, pc}
    gpio_clear(GPIOA, GPIO4);
 80003a6:	20a0      	movs	r0, #160	; 0xa0
 80003a8:	2110      	movs	r1, #16
 80003aa:	05c0      	lsls	r0, r0, #23
 80003ac:	f000 fdfc 	bl	8000fa8 <gpio_clear>
}
 80003b0:	e7f8      	b.n	80003a4 <RFM69_setCSPin+0x10>
	...

080003b4 <sys_tick_handler>:
  sys_tick_timer++;
 80003b4:	4a02      	ldr	r2, [pc, #8]	; (80003c0 <sys_tick_handler+0xc>)
 80003b6:	6813      	ldr	r3, [r2, #0]
 80003b8:	3301      	adds	r3, #1
 80003ba:	6013      	str	r3, [r2, #0]
}
 80003bc:	4770      	bx	lr
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	20000000 	.word	0x20000000

080003c4 <exti2_3_isr>:
void exti2_3_isr() {
 80003c4:	b510      	push	{r4, lr}
  exti_reset_request(EXTI3);
 80003c6:	2008      	movs	r0, #8
 80003c8:	f000 fdac 	bl	8000f24 <exti_reset_request>
  isr0();
 80003cc:	f000 f8d0 	bl	8000570 <isr0>
}
 80003d0:	bd10      	pop	{r4, pc}
	...

080003d4 <main>:

int main(void) {
 80003d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003d6:	b08b      	sub	sp, #44	; 0x2c
  clock_setup();
 80003d8:	f7ff ff0c 	bl	80001f4 <clock_setup>
  spi_setup();
 80003dc:	f7ff ff34 	bl	8000248 <spi_setup>
  gpio_setup();
 80003e0:	f7ff ff62 	bl	80002a8 <gpio_setup>
  i2c_setup();
 80003e4:	f7ff ff80 	bl	80002e8 <i2c_setup>
  
  rfm69_init(RF69_433MHZ, NODEID, NETWORKID);
 80003e8:	220a      	movs	r2, #10
 80003ea:	210a      	movs	r1, #10
 80003ec:	202b      	movs	r0, #43	; 0x2b
 80003ee:	f000 fc39 	bl	8000c64 <rfm69_init>
  RFM69_enableAutoPower(-80);
 80003f2:	2050      	movs	r0, #80	; 0x50
 80003f4:	4240      	negs	r0, r0
 80003f6:	f000 fd0f 	bl	8000e18 <RFM69_enableAutoPower>

  mcp9808_init();
 80003fa:	f000 fd49 	bl	8000e90 <mcp9808_init>

  char payload[16];
  uint8_t sendSize = 0;//strlen(payload);
 80003fe:	e01d      	b.n	800043c <main+0x68>
    ftoa(tempFloat, payload);
    sendSize = strlen(payload);

    payload[sendSize - 1] = ' ';
    for (int i = 0; i < powerLevelBuffSize; i++) {
      payload[(sendSize) + i] = powerLevelBuff[i];
 8000400:	18c2      	adds	r2, r0, r3
 8000402:	a902      	add	r1, sp, #8
 8000404:	5ccc      	ldrb	r4, [r1, r3]
 8000406:	a906      	add	r1, sp, #24
 8000408:	548c      	strb	r4, [r1, r2]
    for (int i = 0; i < powerLevelBuffSize; i++) {
 800040a:	3301      	adds	r3, #1
 800040c:	429e      	cmp	r6, r3
 800040e:	dcf7      	bgt.n	8000400 <main+0x2c>
    }

    sendSize += (powerLevelBuffSize + 1);
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	b2ea      	uxtb	r2, r5
 8000414:	3201      	adds	r2, #1
 8000416:	b2d2      	uxtb	r2, r2
    payload[sendSize - 1] = '\0';
 8000418:	1e53      	subs	r3, r2, #1
 800041a:	a906      	add	r1, sp, #24
 800041c:	2000      	movs	r0, #0
 800041e:	54c8      	strb	r0, [r1, r3]
    rfm69_sendWithRetry(GATEWAYID, payload, sendSize, 20, 200);
 8000420:	23c8      	movs	r3, #200	; 0xc8
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	3bb4      	subs	r3, #180	; 0xb4
 8000426:	300b      	adds	r0, #11
 8000428:	f000 fbb4 	bl	8000b94 <rfm69_sendWithRetry>

    uint32_t now = sys_tick_timer;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <main+0xb0>)
 800042e:	6819      	ldr	r1, [r3, #0]
    while ((sys_tick_timer - now) < 5000) {
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <main+0xb0>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	4a14      	ldr	r2, [pc, #80]	; (8000488 <main+0xb4>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d9f9      	bls.n	8000430 <main+0x5c>
    uint16_t tempValue = mcp9808_readTempReg();
 800043c:	f000 fd3f 	bl	8000ebe <mcp9808_readTempReg>
    float tempFloat = tempValue & 0x0FFF;
 8000440:	0500      	lsls	r0, r0, #20
 8000442:	0d00      	lsrs	r0, r0, #20
 8000444:	f001 fa24 	bl	8001890 <__aeabi_i2f>
    tempFloat /= 16.0;
 8000448:	21f6      	movs	r1, #246	; 0xf6
 800044a:	0589      	lsls	r1, r1, #22
 800044c:	f001 f92e 	bl	80016ac <__aeabi_fmul>
 8000450:	1c07      	adds	r7, r0, #0
    uint8_t powerLevel = RFM69_getPowerLevel();
 8000452:	f000 fcdb 	bl	8000e0c <RFM69_getPowerLevel>
    itoa(powerLevel, powerLevelBuff, 10);
 8000456:	220a      	movs	r2, #10
 8000458:	a902      	add	r1, sp, #8
 800045a:	f001 f889 	bl	8001570 <itoa>
    uint8_t powerLevelBuffSize = strlen(powerLevelBuff);
 800045e:	a802      	add	r0, sp, #8
 8000460:	f001 f88a 	bl	8001578 <strlen>
 8000464:	0006      	movs	r6, r0
 8000466:	b2c5      	uxtb	r5, r0
    ftoa(tempFloat, payload);
 8000468:	ac06      	add	r4, sp, #24
 800046a:	0021      	movs	r1, r4
 800046c:	1c38      	adds	r0, r7, #0
 800046e:	f7ff fe27 	bl	80000c0 <ftoa>
    sendSize = strlen(payload);
 8000472:	0020      	movs	r0, r4
 8000474:	f001 f880 	bl	8001578 <strlen>
 8000478:	b2c7      	uxtb	r7, r0
    payload[sendSize - 1] = ' ';
 800047a:	1e43      	subs	r3, r0, #1
 800047c:	2220      	movs	r2, #32
 800047e:	54e2      	strb	r2, [r4, r3]
    for (int i = 0; i < powerLevelBuffSize; i++) {
 8000480:	2300      	movs	r3, #0
 8000482:	e7c3      	b.n	800040c <main+0x38>
 8000484:	20000000 	.word	0x20000000
 8000488:	00001387 	.word	0x00001387

0800048c <writeAndReceive>:
  SPI_transfer8Bit(value);
  //  HAL_SPI_Transmit(&hspi1, buff, 2, 1000);
  unselect();
}
// HAL_SPI_TransmitReceive (SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
static uint8_t writeAndReceive(uint8_t outData) {
 800048c:	b510      	push	{r4, lr}
  return SPI_transfer8Bit(outData);
 800048e:	f7ff ff5d 	bl	800034c <SPI_transfer8Bit>
  //  uint8_t inData;
  //  HAL_SPI_TransmitReceive(&hspi1, &outData, &inData, 1, 1000);
  //  return inData;
}
 8000492:	bd10      	pop	{r4, pc}

08000494 <select>:
static void select() {
 8000494:	b510      	push	{r4, lr}
  noInterrupts();
 8000496:	f7ff ff73 	bl	8000380 <noInterrupts>
  RFM69_setCSPin(false);
 800049a:	2000      	movs	r0, #0
 800049c:	f7ff ff7a 	bl	8000394 <RFM69_setCSPin>
}
 80004a0:	bd10      	pop	{r4, pc}

080004a2 <unselect>:
static void unselect(void) {
 80004a2:	b510      	push	{r4, lr}
  RFM69_setCSPin(true);
 80004a4:	2001      	movs	r0, #1
 80004a6:	f7ff ff75 	bl	8000394 <RFM69_setCSPin>
  interrupts();
 80004aa:	f7ff ff6e 	bl	800038a <interrupts>
}
 80004ae:	bd10      	pop	{r4, pc}

080004b0 <writeReg>:
static void writeReg(uint8_t addr, uint8_t value) {
 80004b0:	b570      	push	{r4, r5, r6, lr}
 80004b2:	0005      	movs	r5, r0
 80004b4:	000c      	movs	r4, r1
  select();
 80004b6:	f7ff ffed 	bl	8000494 <select>
  SPI_transfer8Bit(addr | 0x80);
 80004ba:	2080      	movs	r0, #128	; 0x80
 80004bc:	4240      	negs	r0, r0
 80004be:	4328      	orrs	r0, r5
 80004c0:	b2c0      	uxtb	r0, r0
 80004c2:	f7ff ff43 	bl	800034c <SPI_transfer8Bit>
  SPI_transfer8Bit(value);
 80004c6:	0020      	movs	r0, r4
 80004c8:	f7ff ff40 	bl	800034c <SPI_transfer8Bit>
  unselect();
 80004cc:	f7ff ffe9 	bl	80004a2 <unselect>
}
 80004d0:	bd70      	pop	{r4, r5, r6, pc}

080004d2 <setHighPowerRegs>:
//void spi_transfer(uint8_t data) {
//  SPI_transfer8Bit(data);
//  //  HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
//}

static void setHighPowerRegs(bool onOff) {
 80004d2:	b510      	push	{r4, lr}
 80004d4:	1e04      	subs	r4, r0, #0
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
 80004d6:	d00a      	beq.n	80004ee <setHighPowerRegs+0x1c>
 80004d8:	215d      	movs	r1, #93	; 0x5d
 80004da:	205a      	movs	r0, #90	; 0x5a
 80004dc:	f7ff ffe8 	bl	80004b0 <writeReg>
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
 80004e0:	2c00      	cmp	r4, #0
 80004e2:	d006      	beq.n	80004f2 <setHighPowerRegs+0x20>
 80004e4:	217c      	movs	r1, #124	; 0x7c
 80004e6:	205c      	movs	r0, #92	; 0x5c
 80004e8:	f7ff ffe2 	bl	80004b0 <writeReg>
}
 80004ec:	bd10      	pop	{r4, pc}
  writeReg(REG_TESTPA1, onOff ? 0x5D : 0x55);
 80004ee:	2155      	movs	r1, #85	; 0x55
 80004f0:	e7f3      	b.n	80004da <setHighPowerRegs+0x8>
  writeReg(REG_TESTPA2, onOff ? 0x7C : 0x70);
 80004f2:	2170      	movs	r1, #112	; 0x70
 80004f4:	e7f7      	b.n	80004e6 <setHighPowerRegs+0x14>

080004f6 <readReg>:
static uint8_t readReg(uint8_t addr) {
 80004f6:	b510      	push	{r4, lr}
 80004f8:	0004      	movs	r4, r0
  select();
 80004fa:	f7ff ffcb 	bl	8000494 <select>
  uint8_t buff = addr & 0x7F;
 80004fe:	207f      	movs	r0, #127	; 0x7f
 8000500:	4020      	ands	r0, r4
  SPI_transfer8Bit(buff);
 8000502:	f7ff ff23 	bl	800034c <SPI_transfer8Bit>
  regVal = SPI_transfer8Bit(0);
 8000506:	2000      	movs	r0, #0
 8000508:	f7ff ff20 	bl	800034c <SPI_transfer8Bit>
 800050c:	0004      	movs	r4, r0
  unselect();
 800050e:	f7ff ffc8 	bl	80004a2 <unselect>
}
 8000512:	0020      	movs	r0, r4
 8000514:	bd10      	pop	{r4, pc}
	...

08000518 <setHighPower>:
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (validKey ? 1 : 0));
}

// for RFM69HW only: you must call setHighPower(true) after initialize() or else transmission won't work
static void setHighPower(bool onOff) {
 8000518:	b510      	push	{r4, lr}
  isRFM69HW = onOff;
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <setHighPower+0x50>)
 800051c:	7018      	strb	r0, [r3, #0]
  writeReg(REG_OCP, isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
 800051e:	2800      	cmp	r0, #0
 8000520:	d015      	beq.n	800054e <setHighPower+0x36>
 8000522:	210f      	movs	r1, #15
 8000524:	2013      	movs	r0, #19
 8000526:	f7ff ffc3 	bl	80004b0 <writeReg>
  if (isRFM69HW) // turning ON
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <setHighPower+0x50>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d00f      	beq.n	8000552 <setHighPower+0x3a>
    writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0x1F) | RF_PALEVEL_PA1_ON | RF_PALEVEL_PA2_ON); // enable P1 & P2 amplifier stages
 8000532:	2011      	movs	r0, #17
 8000534:	f7ff ffdf 	bl	80004f6 <readReg>
 8000538:	b240      	sxtb	r0, r0
 800053a:	211f      	movs	r1, #31
 800053c:	4001      	ands	r1, r0
 800053e:	2060      	movs	r0, #96	; 0x60
 8000540:	4301      	orrs	r1, r0
 8000542:	b249      	sxtb	r1, r1
 8000544:	b2c9      	uxtb	r1, r1
 8000546:	2011      	movs	r0, #17
 8000548:	f7ff ffb2 	bl	80004b0 <writeReg>
  else
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | powerLevel); // enable P0 only
}
 800054c:	bd10      	pop	{r4, pc}
  writeReg(REG_OCP, isRFM69HW ? RF_OCP_OFF : RF_OCP_ON);
 800054e:	211a      	movs	r1, #26
 8000550:	e7e8      	b.n	8000524 <setHighPower+0xc>
    writeReg(REG_PALEVEL, RF_PALEVEL_PA0_ON | RF_PALEVEL_PA1_OFF | RF_PALEVEL_PA2_OFF | powerLevel); // enable P0 only
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <setHighPower+0x54>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2180      	movs	r1, #128	; 0x80
 8000558:	4249      	negs	r1, r1
 800055a:	4319      	orrs	r1, r3
 800055c:	b2c9      	uxtb	r1, r1
 800055e:	2011      	movs	r0, #17
 8000560:	f7ff ffa6 	bl	80004b0 <writeReg>
}
 8000564:	e7f2      	b.n	800054c <setHighPower+0x34>
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	20000054 	.word	0x20000054
 800056c:	20000057 	.word	0x20000057

08000570 <isr0>:
  haveData = true;  
 8000570:	4b01      	ldr	r3, [pc, #4]	; (8000578 <isr0+0x8>)
 8000572:	2201      	movs	r2, #1
 8000574:	701a      	strb	r2, [r3, #0]
}
 8000576:	4770      	bx	lr
 8000578:	20000053 	.word	0x20000053

0800057c <readRSSI>:
int16_t readRSSI(bool forceTrigger) {
 800057c:	b510      	push	{r4, lr}
  if (forceTrigger)
 800057e:	2800      	cmp	r0, #0
 8000580:	d107      	bne.n	8000592 <readRSSI+0x16>
  rssi = -readReg(REG_RSSIVALUE);
 8000582:	2024      	movs	r0, #36	; 0x24
 8000584:	f7ff ffb7 	bl	80004f6 <readReg>
 8000588:	b280      	uxth	r0, r0
 800058a:	4240      	negs	r0, r0
 800058c:	b200      	sxth	r0, r0
   rssi >>= 1;
 800058e:	1040      	asrs	r0, r0, #1
}
 8000590:	bd10      	pop	{r4, pc}
    writeReg(REG_RSSICONFIG, RF_RSSI_START);
 8000592:	2101      	movs	r1, #1
 8000594:	2023      	movs	r0, #35	; 0x23
 8000596:	f7ff ff8b 	bl	80004b0 <writeReg>
    while ((readReg(REG_RSSICONFIG) & RF_RSSI_DONE) == 0x00); // wait for RSSI_Ready
 800059a:	2023      	movs	r0, #35	; 0x23
 800059c:	f7ff ffab 	bl	80004f6 <readReg>
 80005a0:	0783      	lsls	r3, r0, #30
 80005a2:	d5fa      	bpl.n	800059a <readRSSI+0x1e>
 80005a4:	e7ed      	b.n	8000582 <readRSSI+0x6>
	...

080005a8 <interruptHook>:
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
  setMode(RF69_MODE_RX);
}

void interruptHook(uint8_t CTLbyte) {
 80005a8:	b510      	push	{r4, lr}
  ACK_RSSI_REQUESTED = CTLbyte & RFM69_CTL_RESERVE1; // TomWS1: extract the ACK RSSI request bit (could potentially merge with ACK_REQUESTED)
 80005aa:	2320      	movs	r3, #32
 80005ac:	4003      	ands	r3, r0
 80005ae:	4a1b      	ldr	r2, [pc, #108]	; (800061c <interruptHook+0x74>)
 80005b0:	7013      	strb	r3, [r2, #0]
  // TomWS1: now see if this was an ACK with an ACK_RSSI response
  if (ACK_RECEIVED){// && ACK_RSSI_REQUESTED) {
 80005b2:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <interruptHook+0x78>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d003      	beq.n	80005c2 <interruptHook+0x1a>
    // the next two bytes contain the ACK_RSSI (assuming the datalength is valid)
    if (DATALEN >= 1) {
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <interruptHook+0x7c>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d100      	bne.n	80005c4 <interruptHook+0x1c>
          transmitLevel--;
        //}
      }
    }
  }
}
 80005c2:	bd10      	pop	{r4, pc}
      ackRSSI = -1 * writeAndReceive(0); //rssi was sent as single byte positive value, get the real value by * -1
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff ff61 	bl	800048c <writeAndReceive>
 80005ca:	b280      	uxth	r0, r0
 80005cc:	4240      	negs	r0, r0
 80005ce:	b200      	sxth	r0, r0
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <interruptHook+0x80>)
 80005d2:	8018      	strh	r0, [r3, #0]
      DATALEN -= 1;   // and compensate data length accordingly
 80005d4:	4a13      	ldr	r2, [pc, #76]	; (8000624 <interruptHook+0x7c>)
 80005d6:	7813      	ldrb	r3, [r2, #0]
 80005d8:	3b01      	subs	r3, #1
 80005da:	7013      	strb	r3, [r2, #0]
      if (targetRSSI != 0) {
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <interruptHook+0x84>)
 80005de:	2200      	movs	r2, #0
 80005e0:	5e9b      	ldrsh	r3, [r3, r2]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0ed      	beq.n	80005c2 <interruptHook+0x1a>
        if (ackRSSI < targetRSSI && transmitLevel < 31)
 80005e6:	4298      	cmp	r0, r3
 80005e8:	da0e      	bge.n	8000608 <interruptHook+0x60>
 80005ea:	4a11      	ldr	r2, [pc, #68]	; (8000630 <interruptHook+0x88>)
 80005ec:	8812      	ldrh	r2, [r2, #0]
 80005ee:	2a1e      	cmp	r2, #30
 80005f0:	d80a      	bhi.n	8000608 <interruptHook+0x60>
          transmitLevel += transmitLevelStep;
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <interruptHook+0x8c>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	18d2      	adds	r2, r2, r3
 80005f8:	b292      	uxth	r2, r2
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <interruptHook+0x88>)
 80005fc:	801a      	strh	r2, [r3, #0]
          if (transmitLevel > 31) transmitLevel = 31;
 80005fe:	2a1f      	cmp	r2, #31
 8000600:	d9df      	bls.n	80005c2 <interruptHook+0x1a>
 8000602:	221f      	movs	r2, #31
 8000604:	801a      	strh	r2, [r3, #0]
 8000606:	e7dc      	b.n	80005c2 <interruptHook+0x1a>
        else if (ackRSSI > targetRSSI && transmitLevel > 0)
 8000608:	4298      	cmp	r0, r3
 800060a:	ddda      	ble.n	80005c2 <interruptHook+0x1a>
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <interruptHook+0x88>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0d6      	beq.n	80005c2 <interruptHook+0x1a>
          transmitLevel--;
 8000614:	3b01      	subs	r3, #1
 8000616:	4a06      	ldr	r2, [pc, #24]	; (8000630 <interruptHook+0x88>)
 8000618:	8013      	strh	r3, [r2, #0]
}
 800061a:	e7d2      	b.n	80005c2 <interruptHook+0x1a>
 800061c:	20000006 	.word	0x20000006
 8000620:	20000004 	.word	0x20000004
 8000624:	20000046 	.word	0x20000046
 8000628:	2000004e 	.word	0x2000004e
 800062c:	20000058 	.word	0x20000058
 8000630:	2000005a 	.word	0x2000005a
 8000634:	2000005c 	.word	0x2000005c

08000638 <RFM69_setPowerLevel>:
 out:
   unselect();
   // This is something from Arduino that will need to be implemented interrupts();
}

void RFM69_setPowerLevel(uint8_t powerLevel_param) {
 8000638:	b510      	push	{r4, lr}
  powerLevel = (powerLevel_param > 31 ? 31 : powerLevel_param);
 800063a:	1c03      	adds	r3, r0, #0
 800063c:	281f      	cmp	r0, #31
 800063e:	d900      	bls.n	8000642 <RFM69_setPowerLevel+0xa>
 8000640:	231f      	movs	r3, #31
 8000642:	b2da      	uxtb	r2, r3
 8000644:	490a      	ldr	r1, [pc, #40]	; (8000670 <RFM69_setPowerLevel+0x38>)
 8000646:	700b      	strb	r3, [r1, #0]
  if (isRFM69HW) powerLevel /= 2;
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <RFM69_setPowerLevel+0x3c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <RFM69_setPowerLevel+0x1c>
 8000650:	0852      	lsrs	r2, r2, #1
 8000652:	700a      	strb	r2, [r1, #0]
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | powerLevel);
 8000654:	2011      	movs	r0, #17
 8000656:	f7ff ff4e 	bl	80004f6 <readReg>
 800065a:	b241      	sxtb	r1, r0
 800065c:	231f      	movs	r3, #31
 800065e:	4399      	bics	r1, r3
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <RFM69_setPowerLevel+0x38>)
 8000662:	7818      	ldrb	r0, [r3, #0]
 8000664:	4301      	orrs	r1, r0
 8000666:	b2c9      	uxtb	r1, r1
 8000668:	2011      	movs	r0, #17
 800066a:	f7ff ff21 	bl	80004b0 <writeReg>
}
 800066e:	bd10      	pop	{r4, pc}
 8000670:	20000057 	.word	0x20000057
 8000674:	20000054 	.word	0x20000054

08000678 <setMode>:
static void setMode(uint8_t newMode) {
 8000678:	b510      	push	{r4, lr}
 800067a:	0004      	movs	r4, r0
  if (newMode == mode) {
 800067c:	4b35      	ldr	r3, [pc, #212]	; (8000754 <setMode+0xdc>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4283      	cmp	r3, r0
 8000682:	d04e      	beq.n	8000722 <setMode+0xaa>
  switch (newMode) {
 8000684:	2804      	cmp	r0, #4
 8000686:	d84c      	bhi.n	8000722 <setMode+0xaa>
 8000688:	0083      	lsls	r3, r0, #2
 800068a:	4a33      	ldr	r2, [pc, #204]	; (8000758 <setMode+0xe0>)
 800068c:	58d3      	ldr	r3, [r2, r3]
 800068e:	469f      	mov	pc, r3
    writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_TRANSMITTER);
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff ff30 	bl	80004f6 <readReg>
 8000696:	b241      	sxtb	r1, r0
 8000698:	231c      	movs	r3, #28
 800069a:	4399      	bics	r1, r3
 800069c:	200c      	movs	r0, #12
 800069e:	4301      	orrs	r1, r0
 80006a0:	b2c9      	uxtb	r1, r1
 80006a2:	2001      	movs	r0, #1
 80006a4:	f7ff ff04 	bl	80004b0 <writeReg>
    if (isRFM69HW)
 80006a8:	4b2c      	ldr	r3, [pc, #176]	; (800075c <setMode+0xe4>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d109      	bne.n	80006c4 <setMode+0x4c>
    if (targetRSSI) {
 80006b0:	4b2b      	ldr	r3, [pc, #172]	; (8000760 <setMode+0xe8>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	5e9b      	ldrsh	r3, [r3, r2]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d028      	beq.n	800070c <setMode+0x94>
      RFM69_setPowerLevel(transmitLevel);
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <setMode+0xec>)
 80006bc:	7818      	ldrb	r0, [r3, #0]
 80006be:	f7ff ffbb 	bl	8000638 <RFM69_setPowerLevel>
 80006c2:	e023      	b.n	800070c <setMode+0x94>
      setHighPowerRegs(true);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff ff04 	bl	80004d2 <setHighPowerRegs>
 80006ca:	e7f1      	b.n	80006b0 <setMode+0x38>
    writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_RECEIVER);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ff12 	bl	80004f6 <readReg>
 80006d2:	b241      	sxtb	r1, r0
 80006d4:	231c      	movs	r3, #28
 80006d6:	4399      	bics	r1, r3
 80006d8:	2010      	movs	r0, #16
 80006da:	4301      	orrs	r1, r0
 80006dc:	b2c9      	uxtb	r1, r1
 80006de:	2001      	movs	r0, #1
 80006e0:	f7ff fee6 	bl	80004b0 <writeReg>
    if (isRFM69HW)
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <setMode+0xe4>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d00f      	beq.n	800070c <setMode+0x94>
      setHighPowerRegs(false);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff fef0 	bl	80004d2 <setHighPowerRegs>
 80006f2:	e00b      	b.n	800070c <setMode+0x94>
    writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SYNTHESIZER);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f7ff fefe 	bl	80004f6 <readReg>
 80006fa:	b241      	sxtb	r1, r0
 80006fc:	231c      	movs	r3, #28
 80006fe:	4399      	bics	r1, r3
 8000700:	2008      	movs	r0, #8
 8000702:	4301      	orrs	r1, r0
 8000704:	b2c9      	uxtb	r1, r1
 8000706:	2001      	movs	r0, #1
 8000708:	f7ff fed2 	bl	80004b0 <writeReg>
  while (mode == RF69_MODE_SLEEP && (readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // wait for ModeReady
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <setMode+0xdc>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d104      	bne.n	800071e <setMode+0xa6>
 8000714:	2027      	movs	r0, #39	; 0x27
 8000716:	f7ff feee 	bl	80004f6 <readReg>
 800071a:	0603      	lsls	r3, r0, #24
 800071c:	d5f6      	bpl.n	800070c <setMode+0x94>
  mode = newMode;
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <setMode+0xdc>)
 8000720:	701c      	strb	r4, [r3, #0]
}
 8000722:	bd10      	pop	{r4, pc}
    writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_STANDBY);
 8000724:	2001      	movs	r0, #1
 8000726:	f7ff fee6 	bl	80004f6 <readReg>
 800072a:	b241      	sxtb	r1, r0
 800072c:	231c      	movs	r3, #28
 800072e:	4399      	bics	r1, r3
 8000730:	2004      	movs	r0, #4
 8000732:	4301      	orrs	r1, r0
 8000734:	b2c9      	uxtb	r1, r1
 8000736:	2001      	movs	r0, #1
 8000738:	f7ff feba 	bl	80004b0 <writeReg>
    break;
 800073c:	e7e6      	b.n	800070c <setMode+0x94>
    writeReg(REG_OPMODE, (readReg(REG_OPMODE) & 0xE3) | RF_OPMODE_SLEEP);
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff fed9 	bl	80004f6 <readReg>
 8000744:	231c      	movs	r3, #28
 8000746:	4398      	bics	r0, r3
 8000748:	b2c1      	uxtb	r1, r0
 800074a:	2001      	movs	r0, #1
 800074c:	f7ff feb0 	bl	80004b0 <writeReg>
    break;
 8000750:	e7dc      	b.n	800070c <setMode+0x94>
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	20000055 	.word	0x20000055
 8000758:	0800196c 	.word	0x0800196c
 800075c:	20000054 	.word	0x20000054
 8000760:	20000058 	.word	0x20000058
 8000764:	2000005a 	.word	0x2000005a

08000768 <encrypt>:
static void encrypt(const char *key) {
 8000768:	b570      	push	{r4, r5, r6, lr}
 800076a:	0005      	movs	r5, r0
  setMode(RF69_MODE_STANDBY);
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff ff83 	bl	8000678 <setMode>
  uint8_t validKey = key != 0 && strlen(key) != 0;
 8000772:	2d00      	cmp	r5, #0
 8000774:	d011      	beq.n	800079a <encrypt+0x32>
 8000776:	782b      	ldrb	r3, [r5, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d110      	bne.n	800079e <encrypt+0x36>
 800077c:	b2de      	uxtb	r6, r3
  if (validKey) {
 800077e:	2b00      	cmp	r3, #0
 8000780:	d10f      	bne.n	80007a2 <encrypt+0x3a>
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (validKey ? 1 : 0));
 8000782:	203d      	movs	r0, #61	; 0x3d
 8000784:	f7ff feb7 	bl	80004f6 <readReg>
 8000788:	b241      	sxtb	r1, r0
 800078a:	2301      	movs	r3, #1
 800078c:	4399      	bics	r1, r3
 800078e:	4331      	orrs	r1, r6
 8000790:	b2c9      	uxtb	r1, r1
 8000792:	203d      	movs	r0, #61	; 0x3d
 8000794:	f7ff fe8c 	bl	80004b0 <writeReg>
}
 8000798:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t validKey = key != 0 && strlen(key) != 0;
 800079a:	2300      	movs	r3, #0
 800079c:	e7ee      	b.n	800077c <encrypt+0x14>
 800079e:	2301      	movs	r3, #1
 80007a0:	e7ec      	b.n	800077c <encrypt+0x14>
    select();
 80007a2:	f7ff fe77 	bl	8000494 <select>
    spi_transfer(REG_AESKEY1 | 0x80);
 80007a6:	20be      	movs	r0, #190	; 0xbe
 80007a8:	f7ff fdda 	bl	8000360 <spi_transfer>
    for (int i = 0; i < 16; i++) {
 80007ac:	2400      	movs	r4, #0
 80007ae:	e003      	b.n	80007b8 <encrypt+0x50>
      spi_transfer(key[i]);
 80007b0:	5d28      	ldrb	r0, [r5, r4]
 80007b2:	f7ff fdd5 	bl	8000360 <spi_transfer>
    for (int i = 0; i < 16; i++) {
 80007b6:	3401      	adds	r4, #1
 80007b8:	2c0f      	cmp	r4, #15
 80007ba:	ddf9      	ble.n	80007b0 <encrypt+0x48>
    unselect();
 80007bc:	f7ff fe71 	bl	80004a2 <unselect>
 80007c0:	e7df      	b.n	8000782 <encrypt+0x1a>
	...

080007c4 <canSend>:
{
 80007c4:	b510      	push	{r4, lr}
  if (mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI(false) < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <canSend+0x34>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	d001      	beq.n	80007d2 <canSend+0xe>
  return false;
 80007ce:	2000      	movs	r0, #0
}
 80007d0:	bd10      	pop	{r4, pc}
  if (mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI(false) < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <canSend+0x38>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <canSend+0x1a>
  return false;
 80007da:	2000      	movs	r0, #0
 80007dc:	e7f8      	b.n	80007d0 <canSend+0xc>
  if (mode == RF69_MODE_RX && PAYLOADLEN == 0 && readRSSI(false) < CSMA_LIMIT) // if signal stronger than -100dBm is detected assume channel activity
 80007de:	2000      	movs	r0, #0
 80007e0:	f7ff fecc 	bl	800057c <readRSSI>
 80007e4:	305a      	adds	r0, #90	; 0x5a
 80007e6:	db01      	blt.n	80007ec <canSend+0x28>
  return false;
 80007e8:	2000      	movs	r0, #0
 80007ea:	e7f1      	b.n	80007d0 <canSend+0xc>
    setMode(RF69_MODE_STANDBY);
 80007ec:	2001      	movs	r0, #1
 80007ee:	f7ff ff43 	bl	8000678 <setMode>
    return true;
 80007f2:	2001      	movs	r0, #1
 80007f4:	e7ec      	b.n	80007d0 <canSend+0xc>
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	20000055 	.word	0x20000055
 80007fc:	20000047 	.word	0x20000047

08000800 <receiveBegin>:
void receiveBegin() {
 8000800:	b510      	push	{r4, lr}
  ACK_RSSI_REQUESTED = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	4a13      	ldr	r2, [pc, #76]	; (8000854 <receiveBegin+0x54>)
 8000806:	7013      	strb	r3, [r2, #0]
  DATALEN = 0;
 8000808:	4a13      	ldr	r2, [pc, #76]	; (8000858 <receiveBegin+0x58>)
 800080a:	7013      	strb	r3, [r2, #0]
  SENDERID = 0;
 800080c:	2200      	movs	r2, #0
 800080e:	4913      	ldr	r1, [pc, #76]	; (800085c <receiveBegin+0x5c>)
 8000810:	800b      	strh	r3, [r1, #0]
  TARGETID = 0;
 8000812:	4913      	ldr	r1, [pc, #76]	; (8000860 <receiveBegin+0x60>)
 8000814:	800b      	strh	r3, [r1, #0]
  PAYLOADLEN = 0;
 8000816:	4913      	ldr	r1, [pc, #76]	; (8000864 <receiveBegin+0x64>)
 8000818:	700a      	strb	r2, [r1, #0]
  ACK_REQUESTED = 0;
 800081a:	4913      	ldr	r1, [pc, #76]	; (8000868 <receiveBegin+0x68>)
 800081c:	700a      	strb	r2, [r1, #0]
  ACK_RECEIVED = 0;
 800081e:	4913      	ldr	r1, [pc, #76]	; (800086c <receiveBegin+0x6c>)
 8000820:	700a      	strb	r2, [r1, #0]
  RSSI = 0;
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <receiveBegin+0x70>)
 8000824:	8013      	strh	r3, [r2, #0]
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
 8000826:	2028      	movs	r0, #40	; 0x28
 8000828:	f7ff fe65 	bl	80004f6 <readReg>
 800082c:	0743      	lsls	r3, r0, #29
 800082e:	d407      	bmi.n	8000840 <receiveBegin+0x40>
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); // set DIO0 to "PAYLOADREADY" in receive mode
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	2025      	movs	r0, #37	; 0x25
 8000834:	f7ff fe3c 	bl	80004b0 <writeReg>
  setMode(RF69_MODE_RX);
 8000838:	2003      	movs	r0, #3
 800083a:	f7ff ff1d 	bl	8000678 <setMode>
}
 800083e:	bd10      	pop	{r4, pc}
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
 8000840:	203d      	movs	r0, #61	; 0x3d
 8000842:	f7ff fe58 	bl	80004f6 <readReg>
 8000846:	2104      	movs	r1, #4
 8000848:	4301      	orrs	r1, r0
 800084a:	b2c9      	uxtb	r1, r1
 800084c:	203d      	movs	r0, #61	; 0x3d
 800084e:	f7ff fe2f 	bl	80004b0 <writeReg>
 8000852:	e7ed      	b.n	8000830 <receiveBegin+0x30>
 8000854:	20000006 	.word	0x20000006
 8000858:	20000046 	.word	0x20000046
 800085c:	2000004a 	.word	0x2000004a
 8000860:	2000004c 	.word	0x2000004c
 8000864:	20000047 	.word	0x20000047
 8000868:	20000005 	.word	0x20000005
 800086c:	20000004 	.word	0x20000004
 8000870:	20000048 	.word	0x20000048

08000874 <interruptHandler>:
void interruptHandler() {
 8000874:	b570      	push	{r4, r5, r6, lr}
  if (mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
 8000876:	4b38      	ldr	r3, [pc, #224]	; (8000958 <interruptHandler+0xe4>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b03      	cmp	r3, #3
 800087c:	d005      	beq.n	800088a <interruptHandler+0x16>
  RSSI = readRSSI(false);
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff fe7c 	bl	800057c <readRSSI>
 8000884:	4b35      	ldr	r3, [pc, #212]	; (800095c <interruptHandler+0xe8>)
 8000886:	8018      	strh	r0, [r3, #0]
}
 8000888:	bd70      	pop	{r4, r5, r6, pc}
  if (mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
 800088a:	2028      	movs	r0, #40	; 0x28
 800088c:	f7ff fe33 	bl	80004f6 <readReg>
 8000890:	0743      	lsls	r3, r0, #29
 8000892:	d5f4      	bpl.n	800087e <interruptHandler+0xa>
    setMode(RF69_MODE_STANDBY);
 8000894:	2001      	movs	r0, #1
 8000896:	f7ff feef 	bl	8000678 <setMode>
    select();
 800089a:	f7ff fdfb 	bl	8000494 <select>
    spi_transfer(REG_FIFO & 0x7F);
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fd5e 	bl	8000360 <spi_transfer>
    PAYLOADLEN = writeAndReceive(0);
 80008a4:	2000      	movs	r0, #0
 80008a6:	f7ff fdf1 	bl	800048c <writeAndReceive>
 80008aa:	4b2d      	ldr	r3, [pc, #180]	; (8000960 <interruptHandler+0xec>)
 80008ac:	7018      	strb	r0, [r3, #0]
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; // precaution
 80008ae:	1c03      	adds	r3, r0, #0
 80008b0:	2842      	cmp	r0, #66	; 0x42
 80008b2:	d900      	bls.n	80008b6 <interruptHandler+0x42>
 80008b4:	2342      	movs	r3, #66	; 0x42
 80008b6:	4a2a      	ldr	r2, [pc, #168]	; (8000960 <interruptHandler+0xec>)
 80008b8:	7013      	strb	r3, [r2, #0]
    TARGETID = writeAndReceive(0);//_spi->transfer(0);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff fde6 	bl	800048c <writeAndReceive>
 80008c0:	4d28      	ldr	r5, [pc, #160]	; (8000964 <interruptHandler+0xf0>)
 80008c2:	8028      	strh	r0, [r5, #0]
    SENDERID = writeAndReceive(0);
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff fde1 	bl	800048c <writeAndReceive>
 80008ca:	4c27      	ldr	r4, [pc, #156]	; (8000968 <interruptHandler+0xf4>)
 80008cc:	8020      	strh	r0, [r4, #0]
    uint8_t CTLbyte = writeAndReceive(0);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f7ff fddc 	bl	800048c <writeAndReceive>
    TARGETID |= ((uint16_t)(CTLbyte) & 0x0C) << 6; //10 bit address (most significant 2 bits stored in bits(2,3) of CTL byte
 80008d4:	0183      	lsls	r3, r0, #6
 80008d6:	21c0      	movs	r1, #192	; 0xc0
 80008d8:	0089      	lsls	r1, r1, #2
 80008da:	400b      	ands	r3, r1
 80008dc:	882a      	ldrh	r2, [r5, #0]
 80008de:	4313      	orrs	r3, r2
 80008e0:	802b      	strh	r3, [r5, #0]
		 SENDERID |= ((uint16_t)(CTLbyte) & 0x03) << 8; //10 bit address (most sifnigicant 2 bits stored in bits(0,1) of CTL byte
 80008e2:	0202      	lsls	r2, r0, #8
 80008e4:	400a      	ands	r2, r1
 80008e6:	8821      	ldrh	r1, [r4, #0]
 80008e8:	430a      	orrs	r2, r1
 80008ea:	8022      	strh	r2, [r4, #0]
    if(!(spyMode || TARGETID == address || TARGETID == RF69_BROADCAST_ADDR) // match this node's address, or broadcast address or anything in spy mode
 80008ec:	4a1f      	ldr	r2, [pc, #124]	; (800096c <interruptHandler+0xf8>)
 80008ee:	8812      	ldrh	r2, [r2, #0]
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d001      	beq.n	80008f8 <interruptHandler+0x84>
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d103      	bne.n	8000900 <interruptHandler+0x8c>
       || PAYLOADLEN < 3) // address situation could receive packets that are malformed and don't fit this libraries extra fields
 80008f8:	4b19      	ldr	r3, [pc, #100]	; (8000960 <interruptHandler+0xec>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d807      	bhi.n	8000910 <interruptHandler+0x9c>
      PAYLOADLEN = 0;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <interruptHandler+0xec>)
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
      unselect();
 8000906:	f7ff fdcc 	bl	80004a2 <unselect>
      receiveBegin();
 800090a:	f7ff ff79 	bl	8000800 <receiveBegin>
      return;
 800090e:	e7bb      	b.n	8000888 <interruptHandler+0x14>
    DATALEN = PAYLOADLEN - 3;
 8000910:	3b03      	subs	r3, #3
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <interruptHandler+0xfc>)
 8000914:	7013      	strb	r3, [r2, #0]
    ACK_RECEIVED = CTLbyte & RFM69_CTL_SENDACK; // extract ACK-received flag
 8000916:	237f      	movs	r3, #127	; 0x7f
 8000918:	0002      	movs	r2, r0
 800091a:	439a      	bics	r2, r3
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <interruptHandler+0x100>)
 800091e:	701a      	strb	r2, [r3, #0]
    ACK_REQUESTED = CTLbyte & RFM69_CTL_REQACK; // extract ACK-requested flag
 8000920:	2340      	movs	r3, #64	; 0x40
 8000922:	4003      	ands	r3, r0
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <interruptHandler+0x104>)
 8000926:	7013      	strb	r3, [r2, #0]
    interruptHook(CTLbyte);     // TWS: hook to derived class interrupt function
 8000928:	f7ff fe3e 	bl	80005a8 <interruptHook>
    for (uint8_t i = 0; i < DATALEN; i++) DATA[i] = writeAndReceive(0);
 800092c:	2400      	movs	r4, #0
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <interruptHandler+0xfc>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	42a3      	cmp	r3, r4
 8000934:	d907      	bls.n	8000946 <interruptHandler+0xd2>
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff fda8 	bl	800048c <writeAndReceive>
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <interruptHandler+0x108>)
 800093e:	5518      	strb	r0, [r3, r4]
 8000940:	3401      	adds	r4, #1
 8000942:	b2e4      	uxtb	r4, r4
 8000944:	e7f3      	b.n	800092e <interruptHandler+0xba>
    DATA[DATALEN] = 0; // add null at end of string // add null at end of string
 8000946:	4a0d      	ldr	r2, [pc, #52]	; (800097c <interruptHandler+0x108>)
 8000948:	2100      	movs	r1, #0
 800094a:	54d1      	strb	r1, [r2, r3]
    unselect();
 800094c:	f7ff fda9 	bl	80004a2 <unselect>
    setMode(RF69_MODE_RX);
 8000950:	2003      	movs	r0, #3
 8000952:	f7ff fe91 	bl	8000678 <setMode>
 8000956:	e792      	b.n	800087e <interruptHandler+0xa>
 8000958:	20000055 	.word	0x20000055
 800095c:	20000048 	.word	0x20000048
 8000960:	20000047 	.word	0x20000047
 8000964:	2000004c 	.word	0x2000004c
 8000968:	2000004a 	.word	0x2000004a
 800096c:	20000050 	.word	0x20000050
 8000970:	20000046 	.word	0x20000046
 8000974:	20000004 	.word	0x20000004
 8000978:	20000005 	.word	0x20000005
 800097c:	20000008 	.word	0x20000008

08000980 <receiveDone>:
bool receiveDone() {
 8000980:	b510      	push	{r4, lr}
  if (haveData)
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <receiveDone+0x48>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d10b      	bne.n	80009a2 <receiveDone+0x22>
  noInterrupts();
 800098a:	f7ff fcf9 	bl	8000380 <noInterrupts>
  if (mode == RF69_MODE_RX && PAYLOADLEN > 0)
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <receiveDone+0x4c>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b03      	cmp	r3, #3
 8000994:	d00b      	beq.n	80009ae <receiveDone+0x2e>
  else if (mode == RF69_MODE_RX) // already in RX no payload yet
 8000996:	2b03      	cmp	r3, #3
 8000998:	d012      	beq.n	80009c0 <receiveDone+0x40>
  receiveBegin();
 800099a:	f7ff ff31 	bl	8000800 <receiveBegin>
  return false;
 800099e:	2000      	movs	r0, #0
}
 80009a0:	bd10      	pop	{r4, pc}
      haveData = false;
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <receiveDone+0x48>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
      interruptHandler();}
 80009a8:	f7ff ff64 	bl	8000874 <interruptHandler>
 80009ac:	e7ed      	b.n	800098a <receiveDone+0xa>
  if (mode == RF69_MODE_RX && PAYLOADLEN > 0)
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <receiveDone+0x50>)
 80009b0:	7812      	ldrb	r2, [r2, #0]
 80009b2:	2a00      	cmp	r2, #0
 80009b4:	d0ef      	beq.n	8000996 <receiveDone+0x16>
    setMode(RF69_MODE_STANDBY); // enables interrupts
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff fe5e 	bl	8000678 <setMode>
    return true;
 80009bc:	2001      	movs	r0, #1
 80009be:	e7ef      	b.n	80009a0 <receiveDone+0x20>
    interrupts();
 80009c0:	f7ff fce3 	bl	800038a <interrupts>
    return false;
 80009c4:	2000      	movs	r0, #0
 80009c6:	e7eb      	b.n	80009a0 <receiveDone+0x20>
 80009c8:	20000053 	.word	0x20000053
 80009cc:	20000055 	.word	0x20000055
 80009d0:	20000047 	.word	0x20000047

080009d4 <ACKReceived>:
bool ACKReceived(uint16_t fromNodeID) {
 80009d4:	b510      	push	{r4, lr}
 80009d6:	0004      	movs	r4, r0
  if (receiveDone())
 80009d8:	f7ff ffd2 	bl	8000980 <receiveDone>
 80009dc:	2800      	cmp	r0, #0
 80009de:	d100      	bne.n	80009e2 <ACKReceived+0xe>
}
 80009e0:	bd10      	pop	{r4, pc}
    return (SENDERID == fromNodeID || fromNodeID == RF69_BROADCAST_ADDR) && ACK_RECEIVED;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <ACKReceived+0x30>)
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	42a3      	cmp	r3, r4
 80009e8:	d001      	beq.n	80009ee <ACKReceived+0x1a>
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	d105      	bne.n	80009fa <ACKReceived+0x26>
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <ACKReceived+0x34>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d103      	bne.n	80009fe <ACKReceived+0x2a>
 80009f6:	2000      	movs	r0, #0
 80009f8:	e7f2      	b.n	80009e0 <ACKReceived+0xc>
 80009fa:	2000      	movs	r0, #0
 80009fc:	e7f0      	b.n	80009e0 <ACKReceived+0xc>
 80009fe:	2001      	movs	r0, #1
 8000a00:	e7ee      	b.n	80009e0 <ACKReceived+0xc>
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	2000004a 	.word	0x2000004a
 8000a08:	20000004 	.word	0x20000004

08000a0c <sendFrame>:
               bool requestACK, bool sendACK, bool sendRSSI, int16_t lastRSSI) {
 8000a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0e:	46d6      	mov	lr, sl
 8000a10:	4647      	mov	r7, r8
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b083      	sub	sp, #12
 8000a16:	0007      	movs	r7, r0
 8000a18:	000e      	movs	r6, r1
 8000a1a:	0015      	movs	r5, r2
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	ab0a      	add	r3, sp, #40	; 0x28
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	4698      	mov	r8, r3
 8000a24:	ab0b      	add	r3, sp, #44	; 0x2c
 8000a26:	781c      	ldrb	r4, [r3, #0]
 8000a28:	ab0c      	add	r3, sp, #48	; 0x30
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	5e9b      	ldrsh	r3, [r3, r2]
 8000a2e:	469a      	mov	sl, r3
  setMode(RF69_MODE_STANDBY);
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff fe21 	bl	8000678 <setMode>
  while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00){} // wait for ModeReady
 8000a36:	2027      	movs	r0, #39	; 0x27
 8000a38:	f7ff fd5d 	bl	80004f6 <readReg>
 8000a3c:	0603      	lsls	r3, r0, #24
 8000a3e:	d5fa      	bpl.n	8000a36 <sendFrame+0x2a>
  bufferSize += (sendACK && sendRSSI) ? 1 : 0;   // if sending ACK_RSSI then increase data size by 1
 8000a40:	4643      	mov	r3, r8
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <sendFrame+0x42>
 8000a46:	2c00      	cmp	r4, #0
 8000a48:	d134      	bne.n	8000ab4 <sendFrame+0xa8>
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	e000      	b.n	8000a50 <sendFrame+0x44>
 8000a4e:	2200      	movs	r2, #0
 8000a50:	18ad      	adds	r5, r5, r2
 8000a52:	b2ed      	uxtb	r5, r5
  if (bufferSize > RF69_MAX_DATA_LEN) bufferSize = RF69_MAX_DATA_LEN;
 8000a54:	2d3d      	cmp	r5, #61	; 0x3d
 8000a56:	d900      	bls.n	8000a5a <sendFrame+0x4e>
 8000a58:	253d      	movs	r5, #61	; 0x3d
  select();
 8000a5a:	f7ff fd1b 	bl	8000494 <select>
  spi_transfer(REG_FIFO | 0x80);
 8000a5e:	2080      	movs	r0, #128	; 0x80
 8000a60:	f7ff fc7e 	bl	8000360 <spi_transfer>
  spi_transfer(bufferSize + 3);
 8000a64:	1ce8      	adds	r0, r5, #3
 8000a66:	f7ff fc7b 	bl	8000360 <spi_transfer>
  spi_transfer((uint8_t)toAddress);
 8000a6a:	b2f8      	uxtb	r0, r7
 8000a6c:	f7ff fc78 	bl	8000360 <spi_transfer>
  spi_transfer((uint8_t)address);
 8000a70:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <sendFrame+0x120>)
 8000a72:	7818      	ldrb	r0, [r3, #0]
 8000a74:	f7ff fc74 	bl	8000360 <spi_transfer>
  if (toAddress > 0xFF) CTLbyte |= (toAddress & 0x300) >> 6; //assign last 2 bits of address if > 255
 8000a78:	2fff      	cmp	r7, #255	; 0xff
 8000a7a:	d91d      	bls.n	8000ab8 <sendFrame+0xac>
 8000a7c:	11bf      	asrs	r7, r7, #6
 8000a7e:	200c      	movs	r0, #12
 8000a80:	4038      	ands	r0, r7
  if (address > 0xFF) CTLbyte |= (address & 0x300) >> 8;   //assign last 2 bits of address if > 255
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <sendFrame+0x120>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	2bff      	cmp	r3, #255	; 0xff
 8000a88:	d903      	bls.n	8000a92 <sendFrame+0x86>
 8000a8a:	121b      	asrs	r3, r3, #8
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	4013      	ands	r3, r2
 8000a90:	4318      	orrs	r0, r3
  if (sendACK) {                   // TomWS1: adding logic to return ACK_RSSI if requested
 8000a92:	4643      	mov	r3, r8
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d01d      	beq.n	8000ad4 <sendFrame+0xc8>
    spi_transfer(CTLbyte | RFM69_CTL_SENDACK | (sendRSSI?RFM69_CTL_RESERVE1:0));  // TomWS1  TODO: Replace with EXT1
 8000a98:	2780      	movs	r7, #128	; 0x80
 8000a9a:	427f      	negs	r7, r7
 8000a9c:	4338      	orrs	r0, r7
 8000a9e:	b2c0      	uxtb	r0, r0
 8000aa0:	2c00      	cmp	r4, #0
 8000aa2:	d00b      	beq.n	8000abc <sendFrame+0xb0>
 8000aa4:	37a0      	adds	r7, #160	; 0xa0
 8000aa6:	4338      	orrs	r0, r7
 8000aa8:	f7ff fc5a 	bl	8000360 <spi_transfer>
    if (sendRSSI) {
 8000aac:	2c00      	cmp	r4, #0
 8000aae:	d107      	bne.n	8000ac0 <sendFrame+0xb4>
  for (uint8_t i = 0; i < bufferSize; i++)
 8000ab0:	2400      	movs	r4, #0
 8000ab2:	e026      	b.n	8000b02 <sendFrame+0xf6>
  bufferSize += (sendACK && sendRSSI) ? 1 : 0;   // if sending ACK_RSSI then increase data size by 1
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	e7cb      	b.n	8000a50 <sendFrame+0x44>
  uint8_t CTLbyte=0x0;
 8000ab8:	2000      	movs	r0, #0
 8000aba:	e7e2      	b.n	8000a82 <sendFrame+0x76>
    spi_transfer(CTLbyte | RFM69_CTL_SENDACK | (sendRSSI?RFM69_CTL_RESERVE1:0));  // TomWS1  TODO: Replace with EXT1
 8000abc:	2700      	movs	r7, #0
 8000abe:	e7f2      	b.n	8000aa6 <sendFrame+0x9a>
      spi_transfer(abs(lastRSSI)); //RSSI dBm is negative expected between [-100 .. -20], convert to positive and pass along as single extra header byte
 8000ac0:	4653      	mov	r3, sl
 8000ac2:	17da      	asrs	r2, r3, #31
 8000ac4:	1898      	adds	r0, r3, r2
 8000ac6:	4050      	eors	r0, r2
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	f7ff fc49 	bl	8000360 <spi_transfer>
      bufferSize -=1;              // account for the extra ACK-RSSI 'data' byte
 8000ace:	3d01      	subs	r5, #1
 8000ad0:	b2ed      	uxtb	r5, r5
 8000ad2:	e7ed      	b.n	8000ab0 <sendFrame+0xa4>
  else if (requestACK) {  // TODO: add logic to request ackRSSI with ACK - this is when both ends of a transmission would dial power down. May not work well for gateways in multi node networks
 8000ad4:	9b01      	ldr	r3, [sp, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00b      	beq.n	8000af2 <sendFrame+0xe6>
    spi_transfer(CTLbyte | (targetRSSI ? RFM69_CTL_REQACK | RFM69_CTL_RESERVE1 : RFM69_CTL_REQACK));
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <sendFrame+0x124>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	5e9b      	ldrsh	r3, [r3, r2]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d004      	beq.n	8000aee <sendFrame+0xe2>
 8000ae4:	2760      	movs	r7, #96	; 0x60
 8000ae6:	4338      	orrs	r0, r7
 8000ae8:	f7ff fc3a 	bl	8000360 <spi_transfer>
 8000aec:	e7e0      	b.n	8000ab0 <sendFrame+0xa4>
 8000aee:	2740      	movs	r7, #64	; 0x40
 8000af0:	e7f9      	b.n	8000ae6 <sendFrame+0xda>
  else spi_transfer(CTLbyte);
 8000af2:	f7ff fc35 	bl	8000360 <spi_transfer>
 8000af6:	e7db      	b.n	8000ab0 <sendFrame+0xa4>
    spi_transfer(((uint8_t*) buffer)[i]);
 8000af8:	5d30      	ldrb	r0, [r6, r4]
 8000afa:	f7ff fc31 	bl	8000360 <spi_transfer>
  for (uint8_t i = 0; i < bufferSize; i++)
 8000afe:	3401      	adds	r4, #1
 8000b00:	b2e4      	uxtb	r4, r4
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d8f8      	bhi.n	8000af8 <sendFrame+0xec>
  unselect();
 8000b06:	f7ff fccc 	bl	80004a2 <unselect>
  setMode(RF69_MODE_TX);
 8000b0a:	2004      	movs	r0, #4
 8000b0c:	f7ff fdb4 	bl	8000678 <setMode>
  while ((readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT) == 0x00){} // wait for PacketSent
 8000b10:	2028      	movs	r0, #40	; 0x28
 8000b12:	f7ff fcf0 	bl	80004f6 <readReg>
 8000b16:	0703      	lsls	r3, r0, #28
 8000b18:	d5fa      	bpl.n	8000b10 <sendFrame+0x104>
  setMode(RF69_MODE_STANDBY);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f7ff fdac 	bl	8000678 <setMode>
}
 8000b20:	b003      	add	sp, #12
 8000b22:	bcc0      	pop	{r6, r7}
 8000b24:	46ba      	mov	sl, r7
 8000b26:	46b0      	mov	r8, r6
 8000b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	20000050 	.word	0x20000050
 8000b30:	20000058 	.word	0x20000058

08000b34 <send>:
{
 8000b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b36:	46c6      	mov	lr, r8
 8000b38:	b500      	push	{lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	0005      	movs	r5, r0
 8000b3e:	000e      	movs	r6, r1
 8000b40:	0017      	movs	r7, r2
 8000b42:	4698      	mov	r8, r3
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
 8000b44:	203d      	movs	r0, #61	; 0x3d
 8000b46:	f7ff fcd6 	bl	80004f6 <readReg>
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	4301      	orrs	r1, r0
 8000b4e:	b2c9      	uxtb	r1, r1
 8000b50:	203d      	movs	r0, #61	; 0x3d
 8000b52:	f7ff fcad 	bl	80004b0 <writeReg>
  uint32_t now = HAL_GetTick();
 8000b56:	f7ff fc0d 	bl	8000374 <HAL_GetTick>
 8000b5a:	0004      	movs	r4, r0
  while (!canSend() && HAL_GetTick() - now < RF69_CSMA_LIMIT_MS) receiveDone();
 8000b5c:	e001      	b.n	8000b62 <send+0x2e>
 8000b5e:	f7ff ff0f 	bl	8000980 <receiveDone>
 8000b62:	f7ff fe2f 	bl	80007c4 <canSend>
 8000b66:	2800      	cmp	r0, #0
 8000b68:	d106      	bne.n	8000b78 <send+0x44>
 8000b6a:	f7ff fc03 	bl	8000374 <HAL_GetTick>
 8000b6e:	1b00      	subs	r0, r0, r4
 8000b70:	23fa      	movs	r3, #250	; 0xfa
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	4298      	cmp	r0, r3
 8000b76:	d3f2      	bcc.n	8000b5e <send+0x2a>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false, false, 0);
 8000b78:	2300      	movs	r3, #0
 8000b7a:	9302      	str	r3, [sp, #8]
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	4643      	mov	r3, r8
 8000b82:	003a      	movs	r2, r7
 8000b84:	0031      	movs	r1, r6
 8000b86:	0028      	movs	r0, r5
 8000b88:	f7ff ff40 	bl	8000a0c <sendFrame>
}
 8000b8c:	b004      	add	sp, #16
 8000b8e:	bc80      	pop	{r7}
 8000b90:	46b8      	mov	r8, r7
 8000b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b94 <rfm69_sendWithRetry>:
                         uint8_t retryWaitTime) {
 8000b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b96:	46de      	mov	lr, fp
 8000b98:	4657      	mov	r7, sl
 8000b9a:	464e      	mov	r6, r9
 8000b9c:	4645      	mov	r5, r8
 8000b9e:	b5e0      	push	{r5, r6, r7, lr}
 8000ba0:	0006      	movs	r6, r0
 8000ba2:	468b      	mov	fp, r1
 8000ba4:	4692      	mov	sl, r2
 8000ba6:	4699      	mov	r9, r3
 8000ba8:	ab0a      	add	r3, sp, #40	; 0x28
 8000baa:	781f      	ldrb	r7, [r3, #0]
  for (uint8_t i = 0; i <= retries; i++) {
 8000bac:	2300      	movs	r3, #0
 8000bae:	4698      	mov	r8, r3
 8000bb0:	45c8      	cmp	r8, r9
 8000bb2:	d82e      	bhi.n	8000c12 <rfm69_sendWithRetry+0x7e>
    send(toAddress, buffer, bufferSize, true);
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	4652      	mov	r2, sl
 8000bb8:	4659      	mov	r1, fp
 8000bba:	0030      	movs	r0, r6
 8000bbc:	f7ff ffba 	bl	8000b34 <send>
    sentTime = HAL_GetTick();
 8000bc0:	f7ff fbd8 	bl	8000374 <HAL_GetTick>
 8000bc4:	0005      	movs	r5, r0
    while ((HAL_GetTick() - sentTime) < (retryWaitTime*100)) {
 8000bc6:	f7ff fbd5 	bl	8000374 <HAL_GetTick>
 8000bca:	1b40      	subs	r0, r0, r5
 8000bcc:	2464      	movs	r4, #100	; 0x64
 8000bce:	437c      	muls	r4, r7
 8000bd0:	42a0      	cmp	r0, r4
 8000bd2:	d20a      	bcs.n	8000bea <rfm69_sendWithRetry+0x56>
      if (ACKReceived(toAddress)) {
 8000bd4:	0030      	movs	r0, r6
 8000bd6:	f7ff fefd 	bl	80009d4 <ACKReceived>
 8000bda:	2800      	cmp	r0, #0
 8000bdc:	d0f3      	beq.n	8000bc6 <rfm69_sendWithRetry+0x32>
}
 8000bde:	bcf0      	pop	{r4, r5, r6, r7}
 8000be0:	46bb      	mov	fp, r7
 8000be2:	46b2      	mov	sl, r6
 8000be4:	46a9      	mov	r9, r5
 8000be6:	46a0      	mov	r8, r4
 8000be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (transmitLevel < 31) {
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <rfm69_sendWithRetry+0x84>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	2b1e      	cmp	r3, #30
 8000bf0:	d80a      	bhi.n	8000c08 <rfm69_sendWithRetry+0x74>
      transmitLevel += transmitLevelStep;
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <rfm69_sendWithRetry+0x88>)
 8000bf4:	8812      	ldrh	r2, [r2, #0]
 8000bf6:	189b      	adds	r3, r3, r2
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <rfm69_sendWithRetry+0x84>)
 8000bfc:	8013      	strh	r3, [r2, #0]
      if (transmitLevel > 31)
 8000bfe:	2b1f      	cmp	r3, #31
 8000c00:	d902      	bls.n	8000c08 <rfm69_sendWithRetry+0x74>
	  transmitLevel = 31;
 8000c02:	0013      	movs	r3, r2
 8000c04:	221f      	movs	r2, #31
 8000c06:	801a      	strh	r2, [r3, #0]
  for (uint8_t i = 0; i <= retries; i++) {
 8000c08:	4643      	mov	r3, r8
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	4698      	mov	r8, r3
 8000c10:	e7ce      	b.n	8000bb0 <rfm69_sendWithRetry+0x1c>
  return false; 
 8000c12:	2000      	movs	r0, #0
 8000c14:	e7e3      	b.n	8000bde <rfm69_sendWithRetry+0x4a>
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	2000005a 	.word	0x2000005a
 8000c1c:	2000005c 	.word	0x2000005c

08000c20 <rfm69_setPowerLevel>:

void rfm69_setPowerLevel(uint8_t powerLevel_param) {
 8000c20:	b510      	push	{r4, lr}
  powerLevel = (powerLevel_param > 31 ? 31 : powerLevel);
 8000c22:	281f      	cmp	r0, #31
 8000c24:	d818      	bhi.n	8000c58 <rfm69_setPowerLevel+0x38>
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <rfm69_setPowerLevel+0x3c>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	4a0c      	ldr	r2, [pc, #48]	; (8000c5c <rfm69_setPowerLevel+0x3c>)
 8000c2c:	7013      	strb	r3, [r2, #0]
  if (isRFM69HW) powerLevel /= 2;
 8000c2e:	4a0c      	ldr	r2, [pc, #48]	; (8000c60 <rfm69_setPowerLevel+0x40>)
 8000c30:	7812      	ldrb	r2, [r2, #0]
 8000c32:	2a00      	cmp	r2, #0
 8000c34:	d002      	beq.n	8000c3c <rfm69_setPowerLevel+0x1c>
 8000c36:	085b      	lsrs	r3, r3, #1
 8000c38:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <rfm69_setPowerLevel+0x3c>)
 8000c3a:	7013      	strb	r3, [r2, #0]
  writeReg(REG_PALEVEL, (readReg(REG_PALEVEL) & 0xE0) | powerLevel);
 8000c3c:	2011      	movs	r0, #17
 8000c3e:	f7ff fc5a 	bl	80004f6 <readReg>
 8000c42:	b241      	sxtb	r1, r0
 8000c44:	231f      	movs	r3, #31
 8000c46:	4399      	bics	r1, r3
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <rfm69_setPowerLevel+0x3c>)
 8000c4a:	7818      	ldrb	r0, [r3, #0]
 8000c4c:	4301      	orrs	r1, r0
 8000c4e:	b2c9      	uxtb	r1, r1
 8000c50:	2011      	movs	r0, #17
 8000c52:	f7ff fc2d 	bl	80004b0 <writeReg>
}
 8000c56:	bd10      	pop	{r4, pc}
  powerLevel = (powerLevel_param > 31 ? 31 : powerLevel);
 8000c58:	231f      	movs	r3, #31
 8000c5a:	e7e6      	b.n	8000c2a <rfm69_setPowerLevel+0xa>
 8000c5c:	20000057 	.word	0x20000057
 8000c60:	20000054 	.word	0x20000054

08000c64 <rfm69_init>:
bool rfm69_init(uint8_t freqBand_param, uint8_t nodeID, uint8_t networkID_param) {
 8000c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c66:	b08d      	sub	sp, #52	; 0x34
 8000c68:	0005      	movs	r5, r0
 8000c6a:	000f      	movs	r7, r1
 8000c6c:	0016      	movs	r6, r2
  const uint8_t CONFIG[][2] =
 8000c6e:	4b4e      	ldr	r3, [pc, #312]	; (8000da8 <rfm69_init+0x144>)
 8000c70:	466a      	mov	r2, sp
 8000c72:	8013      	strh	r3, [r2, #0]
 8000c74:	2302      	movs	r3, #2
 8000c76:	8053      	strh	r3, [r2, #2]
 8000c78:	4b4c      	ldr	r3, [pc, #304]	; (8000dac <rfm69_init+0x148>)
 8000c7a:	8093      	strh	r3, [r2, #4]
 8000c7c:	4b4c      	ldr	r3, [pc, #304]	; (8000db0 <rfm69_init+0x14c>)
 8000c7e:	80d3      	strh	r3, [r2, #6]
 8000c80:	4b4c      	ldr	r3, [pc, #304]	; (8000db4 <rfm69_init+0x150>)
 8000c82:	8113      	strh	r3, [r2, #8]
 8000c84:	4b4c      	ldr	r3, [pc, #304]	; (8000db8 <rfm69_init+0x154>)
 8000c86:	8153      	strh	r3, [r2, #10]
 8000c88:	2307      	movs	r3, #7
 8000c8a:	7313      	strb	r3, [r2, #12]
    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand_param==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand_param==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand_param==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
 8000c8c:	281f      	cmp	r0, #31
 8000c8e:	d007      	beq.n	8000ca0 <rfm69_init+0x3c>
 8000c90:	282b      	cmp	r0, #43	; 0x2b
 8000c92:	d012      	beq.n	8000cba <rfm69_init+0x56>
 8000c94:	2856      	cmp	r0, #86	; 0x56
 8000c96:	d001      	beq.n	8000c9c <rfm69_init+0x38>
 8000c98:	23e4      	movs	r3, #228	; 0xe4
 8000c9a:	e002      	b.n	8000ca2 <rfm69_init+0x3e>
 8000c9c:	33d2      	adds	r3, #210	; 0xd2
 8000c9e:	e000      	b.n	8000ca2 <rfm69_init+0x3e>
 8000ca0:	234e      	movs	r3, #78	; 0x4e
  const uint8_t CONFIG[][2] =
 8000ca2:	466a      	mov	r2, sp
 8000ca4:	7353      	strb	r3, [r2, #13]
 8000ca6:	2308      	movs	r3, #8
 8000ca8:	7393      	strb	r3, [r2, #14]
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand_param==RF69_315MHZ ? RF_FRFMID_315 : (freqBand_param==RF69_433MHZ ? RF_FRFMID_433 : (freqBand_param==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
 8000caa:	2d1f      	cmp	r5, #31
 8000cac:	d009      	beq.n	8000cc2 <rfm69_init+0x5e>
 8000cae:	2d2b      	cmp	r5, #43	; 0x2b
 8000cb0:	d042      	beq.n	8000d38 <rfm69_init+0xd4>
 8000cb2:	2d56      	cmp	r5, #86	; 0x56
 8000cb4:	d003      	beq.n	8000cbe <rfm69_init+0x5a>
 8000cb6:	23c0      	movs	r3, #192	; 0xc0
 8000cb8:	e004      	b.n	8000cc4 <rfm69_init+0x60>
    /* 0x07 */ { REG_FRFMSB, (uint8_t) (freqBand_param==RF69_315MHZ ? RF_FRFMSB_315 : (freqBand_param==RF69_433MHZ ? RF_FRFMSB_433 : (freqBand_param==RF69_868MHZ ? RF_FRFMSB_868 : RF_FRFMSB_915))) },
 8000cba:	236c      	movs	r3, #108	; 0x6c
 8000cbc:	e7f1      	b.n	8000ca2 <rfm69_init+0x3e>
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand_param==RF69_315MHZ ? RF_FRFMID_315 : (freqBand_param==RF69_433MHZ ? RF_FRFMID_433 : (freqBand_param==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e000      	b.n	8000cc4 <rfm69_init+0x60>
 8000cc2:	23c0      	movs	r3, #192	; 0xc0
  const uint8_t CONFIG[][2] =
 8000cc4:	466a      	mov	r2, sp
 8000cc6:	73d3      	strb	r3, [r2, #15]
 8000cc8:	2309      	movs	r3, #9
 8000cca:	8213      	strh	r3, [r2, #16]
 8000ccc:	4b3b      	ldr	r3, [pc, #236]	; (8000dbc <rfm69_init+0x158>)
 8000cce:	8253      	strh	r3, [r2, #18]
 8000cd0:	4b3b      	ldr	r3, [pc, #236]	; (8000dc0 <rfm69_init+0x15c>)
 8000cd2:	8293      	strh	r3, [r2, #20]
 8000cd4:	4b3b      	ldr	r3, [pc, #236]	; (8000dc4 <rfm69_init+0x160>)
 8000cd6:	82d3      	strh	r3, [r2, #22]
 8000cd8:	4b3b      	ldr	r3, [pc, #236]	; (8000dc8 <rfm69_init+0x164>)
 8000cda:	8313      	strh	r3, [r2, #24]
 8000cdc:	4b3b      	ldr	r3, [pc, #236]	; (8000dcc <rfm69_init+0x168>)
 8000cde:	8353      	strh	r3, [r2, #26]
 8000ce0:	4b3b      	ldr	r3, [pc, #236]	; (8000dd0 <rfm69_init+0x16c>)
 8000ce2:	8393      	strh	r3, [r2, #28]
 8000ce4:	4b3b      	ldr	r3, [pc, #236]	; (8000dd4 <rfm69_init+0x170>)
 8000ce6:	83d3      	strh	r3, [r2, #30]
 8000ce8:	2320      	movs	r3, #32
 8000cea:	2230      	movs	r2, #48	; 0x30
 8000cec:	4669      	mov	r1, sp
 8000cee:	54ca      	strb	r2, [r1, r3]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	54ce      	strb	r6, [r1, r3]
 8000cf4:	4b38      	ldr	r3, [pc, #224]	; (8000dd8 <rfm69_init+0x174>)
 8000cf6:	844b      	strh	r3, [r1, #34]	; 0x22
 8000cf8:	4b38      	ldr	r3, [pc, #224]	; (8000ddc <rfm69_init+0x178>)
 8000cfa:	848b      	strh	r3, [r1, #36]	; 0x24
 8000cfc:	4b38      	ldr	r3, [pc, #224]	; (8000de0 <rfm69_init+0x17c>)
 8000cfe:	84cb      	strh	r3, [r1, #38]	; 0x26
 8000d00:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <rfm69_init+0x180>)
 8000d02:	850b      	strh	r3, [r1, #40]	; 0x28
 8000d04:	4b38      	ldr	r3, [pc, #224]	; (8000de8 <rfm69_init+0x184>)
 8000d06:	854b      	strh	r3, [r1, #42]	; 0x2a
 8000d08:	23ff      	movs	r3, #255	; 0xff
 8000d0a:	858b      	strh	r3, [r1, #44]	; 0x2c
  unselect();
 8000d0c:	f7ff fbc9 	bl	80004a2 <unselect>
    writeReg(REG_SYNCVALUE1, 0xAA);
 8000d10:	21aa      	movs	r1, #170	; 0xaa
 8000d12:	202f      	movs	r0, #47	; 0x2f
 8000d14:	f7ff fbcc 	bl	80004b0 <writeReg>
  } while (readReg(REG_SYNCVALUE1) != 0xAA);
 8000d18:	202f      	movs	r0, #47	; 0x2f
 8000d1a:	f7ff fbec 	bl	80004f6 <readReg>
 8000d1e:	28aa      	cmp	r0, #170	; 0xaa
 8000d20:	d1f6      	bne.n	8000d10 <rfm69_init+0xac>
    writeReg(REG_SYNCVALUE1, 0x55);
 8000d22:	2155      	movs	r1, #85	; 0x55
 8000d24:	202f      	movs	r0, #47	; 0x2f
 8000d26:	f7ff fbc3 	bl	80004b0 <writeReg>
  } while (readReg(REG_SYNCVALUE1) != 0x55);
 8000d2a:	202f      	movs	r0, #47	; 0x2f
 8000d2c:	f7ff fbe3 	bl	80004f6 <readReg>
 8000d30:	2855      	cmp	r0, #85	; 0x55
 8000d32:	d1f6      	bne.n	8000d22 <rfm69_init+0xbe>
  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
 8000d34:	2400      	movs	r4, #0
 8000d36:	e008      	b.n	8000d4a <rfm69_init+0xe6>
    /* 0x08 */ { REG_FRFMID, (uint8_t) (freqBand_param==RF69_315MHZ ? RF_FRFMID_315 : (freqBand_param==RF69_433MHZ ? RF_FRFMID_433 : (freqBand_param==RF69_868MHZ ? RF_FRFMID_868 : RF_FRFMID_915))) },
 8000d38:	2340      	movs	r3, #64	; 0x40
 8000d3a:	e7c3      	b.n	8000cc4 <rfm69_init+0x60>
    writeReg(CONFIG[i][0], CONFIG[i][1]);
 8000d3c:	0063      	lsls	r3, r4, #1
 8000d3e:	446b      	add	r3, sp
 8000d40:	7859      	ldrb	r1, [r3, #1]
 8000d42:	f7ff fbb5 	bl	80004b0 <writeReg>
  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
 8000d46:	3401      	adds	r4, #1
 8000d48:	b2e4      	uxtb	r4, r4
 8000d4a:	0063      	lsls	r3, r4, #1
 8000d4c:	466a      	mov	r2, sp
 8000d4e:	5c98      	ldrb	r0, [r3, r2]
 8000d50:	28ff      	cmp	r0, #255	; 0xff
 8000d52:	d1f3      	bne.n	8000d3c <rfm69_init+0xd8>
  encrypt(0);
 8000d54:	2000      	movs	r0, #0
 8000d56:	f7ff fd07 	bl	8000768 <encrypt>
  setHighPower(false);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff fbdc 	bl	8000518 <setHighPower>
  setMode(RF69_MODE_STANDBY);
 8000d60:	2001      	movs	r0, #1
 8000d62:	f7ff fc89 	bl	8000678 <setMode>
  while((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00) {
 8000d66:	2027      	movs	r0, #39	; 0x27
 8000d68:	f7ff fbc5 	bl	80004f6 <readReg>
 8000d6c:	0603      	lsls	r3, r0, #24
 8000d6e:	d5fa      	bpl.n	8000d66 <rfm69_init+0x102>
  address = nodeID;
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <rfm69_init+0x188>)
 8000d72:	801f      	strh	r7, [r3, #0]
  freqBand = freqBand_param;
 8000d74:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <rfm69_init+0x18c>)
 8000d76:	701d      	strb	r5, [r3, #0]
  networkID = networkID_param;
 8000d78:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <rfm69_init+0x190>)
 8000d7a:	701e      	strb	r6, [r3, #0]
  noInterrupts();
 8000d7c:	f7ff fb00 	bl	8000380 <noInterrupts>
  rfm69_setPowerLevel(startingPowerLevel);
 8000d80:	2001      	movs	r0, #1
 8000d82:	f7ff ff4d 	bl	8000c20 <rfm69_setPowerLevel>
  targetRSSI = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	4a1b      	ldr	r2, [pc, #108]	; (8000df8 <rfm69_init+0x194>)
 8000d8a:	8013      	strh	r3, [r2, #0]
  ackRSSI = 0;
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <rfm69_init+0x198>)
 8000d8e:	8013      	strh	r3, [r2, #0]
  ACK_RSSI_REQUESTED = 0;
 8000d90:	2200      	movs	r2, #0
 8000d92:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <rfm69_init+0x19c>)
 8000d94:	701a      	strb	r2, [r3, #0]
  transmitLevel = 20;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <rfm69_init+0x1a0>)
 8000d98:	2214      	movs	r2, #20
 8000d9a:	801a      	strh	r2, [r3, #0]
  transmitLevelStep = 1;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <rfm69_init+0x1a4>)
 8000d9e:	3a13      	subs	r2, #19
 8000da0:	801a      	strh	r2, [r3, #0]
}
 8000da2:	2001      	movs	r0, #1
 8000da4:	b00d      	add	sp, #52	; 0x34
 8000da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da8:	00000401 	.word	0x00000401
 8000dac:	00000203 	.word	0x00000203
 8000db0:	00004004 	.word	0x00004004
 8000db4:	00000305 	.word	0x00000305
 8000db8:	00003306 	.word	0x00003306
 8000dbc:	00004219 	.word	0x00004219
 8000dc0:	00004025 	.word	0x00004025
 8000dc4:	00000726 	.word	0x00000726
 8000dc8:	00001028 	.word	0x00001028
 8000dcc:	ffffdc29 	.word	0xffffdc29
 8000dd0:	ffff882e 	.word	0xffff882e
 8000dd4:	00002d2f 	.word	0x00002d2f
 8000dd8:	ffff9037 	.word	0xffff9037
 8000ddc:	00004238 	.word	0x00004238
 8000de0:	ffff8f3c 	.word	0xffff8f3c
 8000de4:	0000123d 	.word	0x0000123d
 8000de8:	0000306f 	.word	0x0000306f
 8000dec:	20000050 	.word	0x20000050
 8000df0:	20000052 	.word	0x20000052
 8000df4:	20000056 	.word	0x20000056
 8000df8:	20000058 	.word	0x20000058
 8000dfc:	2000004e 	.word	0x2000004e
 8000e00:	20000006 	.word	0x20000006
 8000e04:	2000005a 	.word	0x2000005a
 8000e08:	2000005c 	.word	0x2000005c

08000e0c <RFM69_getPowerLevel>:

uint8_t RFM69_getPowerLevel(void) {
return transmitLevel;  
 8000e0c:	4b01      	ldr	r3, [pc, #4]	; (8000e14 <RFM69_getPowerLevel+0x8>)
 8000e0e:	7818      	ldrb	r0, [r3, #0]
}
 8000e10:	4770      	bx	lr
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	2000005a 	.word	0x2000005a

08000e18 <RFM69_enableAutoPower>:

void RFM69_enableAutoPower(int16_t targetRSSI_param) {
  targetRSSI = targetRSSI_param;
 8000e18:	4b01      	ldr	r3, [pc, #4]	; (8000e20 <RFM69_enableAutoPower+0x8>)
 8000e1a:	8018      	strh	r0, [r3, #0]
}
 8000e1c:	4770      	bx	lr
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	20000058 	.word	0x20000058

08000e24 <read16>:
  buff[2] = value & 0xFF;
  //HAL_I2C_Master_Transmit(&hi2c1, MCP9808_I2CADDR_DEFAULT << 1, buff, 3, HAL_MAX_DELAY);
  i2c_transfer7(I2C1, MCP9808_I2CADDR_DEFAULT << 0, buff, 3, buff, 0);
}

static uint16_t read16(uint8_t reg) {
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	250f      	movs	r5, #15
 8000e2a:	446d      	add	r5, sp
 8000e2c:	7028      	strb	r0, [r5, #0]
  uint8_t buff[2];
  i2c_transfer7(I2C1, MCP9808_I2CADDR_DEFAULT << 0, &reg, 1, buff, 0);
 8000e2e:	4e0d      	ldr	r6, [pc, #52]	; (8000e64 <read16+0x40>)
 8000e30:	2300      	movs	r3, #0
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	ac05      	add	r4, sp, #20
 8000e36:	9400      	str	r4, [sp, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	002a      	movs	r2, r5
 8000e3c:	2118      	movs	r1, #24
 8000e3e:	0030      	movs	r0, r6
 8000e40:	f000 f9ca 	bl	80011d8 <i2c_transfer7>
  //HAL_I2C_Master_Transmit(&hi2c1, MCP9808_I2CADDR_DEFAULT << 1, &reg, 1, HAL_MAX_DELAY);
  //HAL_I2C_Master_Receive(&hi2c1, MCP9808_I2CADDR_DEFAULT << 1, buff, 2, HAL_MAX_DELAY);
  i2c_transfer7(I2C1, MCP9808_I2CADDR_DEFAULT << 0, &reg, 0, buff, 2);
 8000e44:	2302      	movs	r3, #2
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	9400      	str	r4, [sp, #0]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	002a      	movs	r2, r5
 8000e4e:	2118      	movs	r1, #24
 8000e50:	0030      	movs	r0, r6
 8000e52:	f000 f9c1 	bl	80011d8 <i2c_transfer7>
  uint16_t val = 0;
  val = buff[0];
 8000e56:	7823      	ldrb	r3, [r4, #0]
  val <<= 8;
 8000e58:	021b      	lsls	r3, r3, #8
  val |= buff[1];
 8000e5a:	7860      	ldrb	r0, [r4, #1]
 8000e5c:	4318      	orrs	r0, r3
  return val;
}
 8000e5e:	b006      	add	sp, #24
 8000e60:	bd70      	pop	{r4, r5, r6, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	40005400 	.word	0x40005400

08000e68 <write16>:
static void write16(uint8_t reg, uint16_t value) {
 8000e68:	b500      	push	{lr}
 8000e6a:	b085      	sub	sp, #20
  buff[0] = reg;
 8000e6c:	aa03      	add	r2, sp, #12
 8000e6e:	7010      	strb	r0, [r2, #0]
  buff[1] = value >> 8;
 8000e70:	0a0b      	lsrs	r3, r1, #8
 8000e72:	7053      	strb	r3, [r2, #1]
  buff[2] = value & 0xFF;
 8000e74:	7091      	strb	r1, [r2, #2]
  i2c_transfer7(I2C1, MCP9808_I2CADDR_DEFAULT << 0, buff, 3, buff, 0);
 8000e76:	2300      	movs	r3, #0
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	9200      	str	r2, [sp, #0]
 8000e7c:	3303      	adds	r3, #3
 8000e7e:	2118      	movs	r1, #24
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <write16+0x24>)
 8000e82:	f000 f9a9 	bl	80011d8 <i2c_transfer7>
}
 8000e86:	b005      	add	sp, #20
 8000e88:	bd00      	pop	{pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	40005400 	.word	0x40005400

08000e90 <mcp9808_init>:

bool mcp9808_init(void) {
 8000e90:	b510      	push	{r4, lr}
  if (read16(MCP9808_REG_MANUF_ID) != 0x0054)
 8000e92:	2006      	movs	r0, #6
 8000e94:	f7ff ffc6 	bl	8000e24 <read16>
 8000e98:	2854      	cmp	r0, #84	; 0x54
 8000e9a:	d001      	beq.n	8000ea0 <mcp9808_init+0x10>
    return false;
 8000e9c:	2000      	movs	r0, #0
  if (read16(MCP9808_REG_DEVICE_ID) != 0x0400)
    return false;

  write16(MCP9808_REG_CONFIG, 0x0);
  return true; 
}
 8000e9e:	bd10      	pop	{r4, pc}
  if (read16(MCP9808_REG_DEVICE_ID) != 0x0400)
 8000ea0:	384d      	subs	r0, #77	; 0x4d
 8000ea2:	f7ff ffbf 	bl	8000e24 <read16>
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	4298      	cmp	r0, r3
 8000eac:	d001      	beq.n	8000eb2 <mcp9808_init+0x22>
    return false;
 8000eae:	2000      	movs	r0, #0
 8000eb0:	e7f5      	b.n	8000e9e <mcp9808_init+0xe>
  write16(MCP9808_REG_CONFIG, 0x0);
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff ffd7 	bl	8000e68 <write16>
  return true; 
 8000eba:	2001      	movs	r0, #1
 8000ebc:	e7ef      	b.n	8000e9e <mcp9808_init+0xe>

08000ebe <mcp9808_readTempReg>:

uint16_t mcp9808_readTempReg(void) {
 8000ebe:	b510      	push	{r4, lr}
  return read16(MCP9808_REG_AMBIENT_TEMP);
 8000ec0:	2005      	movs	r0, #5
 8000ec2:	f7ff ffaf 	bl	8000e24 <read16>
}
 8000ec6:	bd10      	pop	{r4, pc}

08000ec8 <exti_set_trigger>:
	#define EXTICR_SELECTION_REG(x)	SYSCFG_EXTICR(x)
#endif

void exti_set_trigger(uint32_t extis, enum exti_trigger_type trig)
{
	switch (trig) {
 8000ec8:	2901      	cmp	r1, #1
 8000eca:	d00c      	beq.n	8000ee6 <exti_set_trigger+0x1e>
 8000ecc:	2902      	cmp	r1, #2
 8000ece:	d013      	beq.n	8000ef8 <exti_set_trigger+0x30>
 8000ed0:	2900      	cmp	r1, #0
 8000ed2:	d107      	bne.n	8000ee4 <exti_set_trigger+0x1c>
	case EXTI_TRIGGER_RISING:
		EXTI_RTSR |= extis;
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <exti_set_trigger+0x38>)
 8000ed6:	6813      	ldr	r3, [r2, #0]
 8000ed8:	4303      	orrs	r3, r0
 8000eda:	6013      	str	r3, [r2, #0]
		EXTI_FTSR &= ~extis;
 8000edc:	4a09      	ldr	r2, [pc, #36]	; (8000f04 <exti_set_trigger+0x3c>)
 8000ede:	6813      	ldr	r3, [r2, #0]
 8000ee0:	4383      	bics	r3, r0
 8000ee2:	6013      	str	r3, [r2, #0]
	case EXTI_TRIGGER_BOTH:
		EXTI_RTSR |= extis;
		EXTI_FTSR |= extis;
		break;
	}
}
 8000ee4:	4770      	bx	lr
		EXTI_RTSR &= ~extis;
 8000ee6:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <exti_set_trigger+0x38>)
 8000ee8:	6813      	ldr	r3, [r2, #0]
 8000eea:	4383      	bics	r3, r0
		EXTI_RTSR |= extis;
 8000eec:	6013      	str	r3, [r2, #0]
		EXTI_FTSR |= extis;
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <exti_set_trigger+0x3c>)
 8000ef0:	6813      	ldr	r3, [r2, #0]
 8000ef2:	4318      	orrs	r0, r3
 8000ef4:	6010      	str	r0, [r2, #0]
}
 8000ef6:	e7f5      	b.n	8000ee4 <exti_set_trigger+0x1c>
		EXTI_RTSR |= extis;
 8000ef8:	4a01      	ldr	r2, [pc, #4]	; (8000f00 <exti_set_trigger+0x38>)
 8000efa:	6813      	ldr	r3, [r2, #0]
 8000efc:	4303      	orrs	r3, r0
 8000efe:	e7f5      	b.n	8000eec <exti_set_trigger+0x24>
 8000f00:	40010408 	.word	0x40010408
 8000f04:	4001040c 	.word	0x4001040c

08000f08 <exti_enable_request>:

void exti_enable_request(uint32_t extis)
{
	/* Enable interrupts. */
	EXTI_IMR |= extis;
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <exti_enable_request+0x14>)
 8000f0a:	6813      	ldr	r3, [r2, #0]
 8000f0c:	4303      	orrs	r3, r0
 8000f0e:	6013      	str	r3, [r2, #0]

	/* Enable events. */
	EXTI_EMR |= extis;
 8000f10:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <exti_enable_request+0x18>)
 8000f12:	6813      	ldr	r3, [r2, #0]
 8000f14:	4318      	orrs	r0, r3
 8000f16:	6010      	str	r0, [r2, #0]
}
 8000f18:	4770      	bx	lr
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	40010400 	.word	0x40010400
 8000f20:	40010404 	.word	0x40010404

08000f24 <exti_reset_request>:
{
#if defined(EXTI_RPR1) && defined(EXTI_FPR1)
	EXTI_RPR1 = extis;
	EXTI_FPR1 = extis;
#else
	EXTI_PR = extis;
 8000f24:	4b01      	ldr	r3, [pc, #4]	; (8000f2c <exti_reset_request+0x8>)
 8000f26:	6018      	str	r0, [r3, #0]
#endif
}
 8000f28:	4770      	bx	lr
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	40010414 	.word	0x40010414

08000f30 <exti_select_source>:
			break;
		case GPIOB:
			bits = 1;
			break;
		case GPIOC:
			bits = 2;
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <exti_select_source+0x60>)
{
 8000f32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
			bits = 2;
 8000f34:	18ce      	adds	r6, r1, r3
 8000f36:	4273      	negs	r3, r6
 8000f38:	415e      	adcs	r6, r3
	for (line = 0; line < 16; line++) {
 8000f3a:	2200      	movs	r2, #0
{
 8000f3c:	9001      	str	r0, [sp, #4]
			bits = 2;
 8000f3e:	0076      	lsls	r6, r6, #1
		if (!(exti & (1 << line))) {
 8000f40:	2401      	movs	r4, #1
 8000f42:	0023      	movs	r3, r4
 8000f44:	4093      	lsls	r3, r2
 8000f46:	9801      	ldr	r0, [sp, #4]
 8000f48:	4218      	tst	r0, r3
 8000f4a:	d017      	beq.n	8000f7c <exti_select_source+0x4c>
		switch (gpioport) {
 8000f4c:	4d11      	ldr	r5, [pc, #68]	; (8000f94 <exti_select_source+0x64>)
			break;
		case GPIOD:
			bits = 3;
 8000f4e:	2303      	movs	r3, #3
		switch (gpioport) {
 8000f50:	42a9      	cmp	r1, r5
 8000f52:	d005      	beq.n	8000f60 <exti_select_source+0x30>
 8000f54:	d816      	bhi.n	8000f84 <exti_select_source+0x54>
 8000f56:	4d10      	ldr	r5, [pc, #64]	; (8000f98 <exti_select_source+0x68>)
 8000f58:	0023      	movs	r3, r4
 8000f5a:	42a9      	cmp	r1, r5
 8000f5c:	d000      	beq.n	8000f60 <exti_select_source+0x30>
			bits = 2;
 8000f5e:	0033      	movs	r3, r6

		uint8_t shift = (uint8_t)(EXTICR_SELECTION_FIELDSIZE * (line % 4));
		uint32_t mask = ((1 << EXTICR_SELECTION_FIELDSIZE) - 1) << shift;
		uint32_t reg = line / 4;

		EXTICR_SELECTION_REG(reg) = (EXTICR_SELECTION_REG(reg) & ~mask) | (bits << shift);
 8000f60:	480e      	ldr	r0, [pc, #56]	; (8000f9c <exti_select_source+0x6c>)
		uint8_t shift = (uint8_t)(EXTICR_SELECTION_FIELDSIZE * (line % 4));
 8000f62:	2503      	movs	r5, #3
		uint32_t reg = line / 4;
 8000f64:	0894      	lsrs	r4, r2, #2
		EXTICR_SELECTION_REG(reg) = (EXTICR_SELECTION_REG(reg) & ~mask) | (bits << shift);
 8000f66:	1824      	adds	r4, r4, r0
		uint32_t mask = ((1 << EXTICR_SELECTION_FIELDSIZE) - 1) << shift;
 8000f68:	200f      	movs	r0, #15
		uint8_t shift = (uint8_t)(EXTICR_SELECTION_FIELDSIZE * (line % 4));
 8000f6a:	4015      	ands	r5, r2
		uint32_t mask = ((1 << EXTICR_SELECTION_FIELDSIZE) - 1) << shift;
 8000f6c:	00ad      	lsls	r5, r5, #2
 8000f6e:	40a8      	lsls	r0, r5
		EXTICR_SELECTION_REG(reg) = (EXTICR_SELECTION_REG(reg) & ~mask) | (bits << shift);
 8000f70:	40ab      	lsls	r3, r5
 8000f72:	00a4      	lsls	r4, r4, #2
 8000f74:	6827      	ldr	r7, [r4, #0]
 8000f76:	4387      	bics	r7, r0
 8000f78:	433b      	orrs	r3, r7
 8000f7a:	6023      	str	r3, [r4, #0]
	for (line = 0; line < 16; line++) {
 8000f7c:	3201      	adds	r2, #1
 8000f7e:	2a10      	cmp	r2, #16
 8000f80:	d1de      	bne.n	8000f40 <exti_select_source+0x10>
	};
}
 8000f82:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		switch (gpioport) {
 8000f84:	4c06      	ldr	r4, [pc, #24]	; (8000fa0 <exti_select_source+0x70>)
		uint32_t bits = 0;
 8000f86:	2300      	movs	r3, #0
		switch (gpioport) {
 8000f88:	42a1      	cmp	r1, r4
 8000f8a:	d1e9      	bne.n	8000f60 <exti_select_source+0x30>
			bits = 7;
 8000f8c:	3307      	adds	r3, #7
 8000f8e:	e7e7      	b.n	8000f60 <exti_select_source+0x30>
 8000f90:	affff800 	.word	0xaffff800
 8000f94:	50000c00 	.word	0x50000c00
 8000f98:	50000400 	.word	0x50000400
 8000f9c:	10004002 	.word	0x10004002
 8000fa0:	50001c00 	.word	0x50001c00

08000fa4 <gpio_set>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8000fa4:	6181      	str	r1, [r0, #24]
}
 8000fa6:	4770      	bx	lr

08000fa8 <gpio_clear>:
	     If multiple pins are to be changed, use bitwise OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8000fa8:	0409      	lsls	r1, r1, #16
 8000faa:	6181      	str	r1, [r0, #24]
}
 8000fac:	4770      	bx	lr

08000fae <gpio_mode_setup>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_mode_setup(uint32_t gpioport, uint8_t mode, uint8_t pull_up_down,
		     uint16_t gpios)
{
 8000fae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fb0:	b085      	sub	sp, #20
 8000fb2:	9101      	str	r1, [sp, #4]
	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
			continue;
		}

		moder &= ~GPIO_MODE_MASK(i);
 8000fb4:	2703      	movs	r7, #3
	pupd = GPIO_PUPDR(gpioport);
 8000fb6:	2100      	movs	r1, #0
{
 8000fb8:	9202      	str	r2, [sp, #8]
 8000fba:	9303      	str	r3, [sp, #12]
	moder = GPIO_MODER(gpioport);
 8000fbc:	6802      	ldr	r2, [r0, #0]
	pupd = GPIO_PUPDR(gpioport);
 8000fbe:	68c3      	ldr	r3, [r0, #12]
		if (!((1 << i) & gpios)) {
 8000fc0:	9c03      	ldr	r4, [sp, #12]
 8000fc2:	2501      	movs	r5, #1
 8000fc4:	410c      	asrs	r4, r1
 8000fc6:	422c      	tst	r4, r5
 8000fc8:	d00a      	beq.n	8000fe0 <gpio_mode_setup+0x32>
		moder &= ~GPIO_MODE_MASK(i);
 8000fca:	003d      	movs	r5, r7
 8000fcc:	004c      	lsls	r4, r1, #1
 8000fce:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8000fd0:	9e01      	ldr	r6, [sp, #4]
		moder &= ~GPIO_MODE_MASK(i);
 8000fd2:	43aa      	bics	r2, r5
		pupd &= ~GPIO_PUPD_MASK(i);
 8000fd4:	43ab      	bics	r3, r5
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000fd6:	9d02      	ldr	r5, [sp, #8]
		moder |= GPIO_MODE(i, mode);
 8000fd8:	40a6      	lsls	r6, r4
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000fda:	40a5      	lsls	r5, r4
		moder |= GPIO_MODE(i, mode);
 8000fdc:	4332      	orrs	r2, r6
		pupd |= GPIO_PUPD(i, pull_up_down);
 8000fde:	432b      	orrs	r3, r5
	for (i = 0; i < 16; i++) {
 8000fe0:	3101      	adds	r1, #1
 8000fe2:	2910      	cmp	r1, #16
 8000fe4:	d1ec      	bne.n	8000fc0 <gpio_mode_setup+0x12>
	}

	/* Set mode and pull up/down control registers. */
	GPIO_MODER(gpioport) = moder;
 8000fe6:	6002      	str	r2, [r0, #0]
	GPIO_PUPDR(gpioport) = pupd;
 8000fe8:	60c3      	str	r3, [r0, #12]
}
 8000fea:	b005      	add	sp, #20
 8000fec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fee <gpio_set_output_options>:
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_output_options(uint32_t gpioport, uint8_t otype, uint8_t speed,
			     uint16_t gpios)
{
 8000fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000ff0:	9201      	str	r2, [sp, #4]
	uint16_t i;
	uint32_t ospeedr;

	if (otype == 0x1) {
 8000ff2:	2901      	cmp	r1, #1
 8000ff4:	d116      	bne.n	8001024 <gpio_set_output_options+0x36>
		GPIO_OTYPER(gpioport) |= gpios;
 8000ff6:	6841      	ldr	r1, [r0, #4]
 8000ff8:	4319      	orrs	r1, r3
	} else {
		GPIO_OTYPER(gpioport) &= ~gpios;
	}

	ospeedr = GPIO_OSPEEDR(gpioport);
 8000ffa:	2400      	movs	r4, #0

	for (i = 0; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8000ffc:	2601      	movs	r6, #1
			continue;
		}
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 8000ffe:	2703      	movs	r7, #3
		GPIO_OTYPER(gpioport) &= ~gpios;
 8001000:	6041      	str	r1, [r0, #4]
	ospeedr = GPIO_OSPEEDR(gpioport);
 8001002:	6881      	ldr	r1, [r0, #8]
		if (!((1 << i) & gpios)) {
 8001004:	001d      	movs	r5, r3
 8001006:	4125      	asrs	r5, r4
 8001008:	4235      	tst	r5, r6
 800100a:	d006      	beq.n	800101a <gpio_set_output_options+0x2c>
		ospeedr &= ~GPIO_OSPEED_MASK(i);
 800100c:	003a      	movs	r2, r7
 800100e:	0065      	lsls	r5, r4, #1
 8001010:	40aa      	lsls	r2, r5
 8001012:	4391      	bics	r1, r2
		ospeedr |= GPIO_OSPEED(i, speed);
 8001014:	9a01      	ldr	r2, [sp, #4]
 8001016:	40aa      	lsls	r2, r5
 8001018:	4311      	orrs	r1, r2
	for (i = 0; i < 16; i++) {
 800101a:	3401      	adds	r4, #1
 800101c:	2c10      	cmp	r4, #16
 800101e:	d1f1      	bne.n	8001004 <gpio_set_output_options+0x16>
	}

	GPIO_OSPEEDR(gpioport) = ospeedr;
 8001020:	6081      	str	r1, [r0, #8]
}
 8001022:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		GPIO_OTYPER(gpioport) &= ~gpios;
 8001024:	6841      	ldr	r1, [r0, #4]
 8001026:	4399      	bics	r1, r3
 8001028:	e7e7      	b.n	8000ffa <gpio_set_output_options+0xc>

0800102a <gpio_set_af>:
@param[in] gpios Unsigned int16. Pin identifiers @ref gpio_pin_id
	     If multiple pins are to be set, use bitwise OR '|' to separate
	     them.
*/
void gpio_set_af(uint32_t gpioport, uint8_t alt_func_num, uint16_t gpios)
{
 800102a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t i;
	uint32_t afrl, afrh;

	afrl = GPIO_AFRL(gpioport);
	afrh = GPIO_AFRH(gpioport);
 800102c:	2400      	movs	r4, #0

	for (i = 0; i < 8; i++) {
		if (!((1 << i) & gpios)) {
 800102e:	2601      	movs	r6, #1
			continue;
		}
		afrl &= ~GPIO_AFR_MASK(i);
 8001030:	270f      	movs	r7, #15
{
 8001032:	9100      	str	r1, [sp, #0]
	afrl = GPIO_AFRL(gpioport);
 8001034:	6a01      	ldr	r1, [r0, #32]
	afrh = GPIO_AFRH(gpioport);
 8001036:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001038:	9201      	str	r2, [sp, #4]
		if (!((1 << i) & gpios)) {
 800103a:	9d01      	ldr	r5, [sp, #4]
 800103c:	4125      	asrs	r5, r4
 800103e:	4235      	tst	r5, r6
 8001040:	d006      	beq.n	8001050 <gpio_set_af+0x26>
		afrl &= ~GPIO_AFR_MASK(i);
 8001042:	003a      	movs	r2, r7
 8001044:	00a5      	lsls	r5, r4, #2
 8001046:	40aa      	lsls	r2, r5
 8001048:	4391      	bics	r1, r2
		afrl |= GPIO_AFR(i, alt_func_num);
 800104a:	9a00      	ldr	r2, [sp, #0]
 800104c:	40aa      	lsls	r2, r5
 800104e:	4311      	orrs	r1, r2
	for (i = 0; i < 8; i++) {
 8001050:	3401      	adds	r4, #1
 8001052:	2c08      	cmp	r4, #8
 8001054:	d1f1      	bne.n	800103a <gpio_set_af+0x10>
 8001056:	2400      	movs	r4, #0
	}

	for (i = 8; i < 16; i++) {
		if (!((1 << i) & gpios)) {
 8001058:	2601      	movs	r6, #1
			continue;
		}
		afrh &= ~GPIO_AFR_MASK(i - 8);
 800105a:	270f      	movs	r7, #15
		if (!((1 << i) & gpios)) {
 800105c:	0025      	movs	r5, r4
 800105e:	9a01      	ldr	r2, [sp, #4]
 8001060:	3508      	adds	r5, #8
 8001062:	412a      	asrs	r2, r5
 8001064:	4232      	tst	r2, r6
 8001066:	d006      	beq.n	8001076 <gpio_set_af+0x4c>
		afrh &= ~GPIO_AFR_MASK(i - 8);
 8001068:	003a      	movs	r2, r7
 800106a:	00a5      	lsls	r5, r4, #2
 800106c:	40aa      	lsls	r2, r5
 800106e:	4393      	bics	r3, r2
		afrh |= GPIO_AFR(i - 8, alt_func_num);
 8001070:	9a00      	ldr	r2, [sp, #0]
 8001072:	40aa      	lsls	r2, r5
 8001074:	4313      	orrs	r3, r2
	for (i = 8; i < 16; i++) {
 8001076:	3401      	adds	r4, #1
 8001078:	2c08      	cmp	r4, #8
 800107a:	d1ef      	bne.n	800105c <gpio_set_af+0x32>
	}

	GPIO_AFRL(gpioport) = afrl;
 800107c:	6201      	str	r1, [r0, #32]
	GPIO_AFRH(gpioport) = afrh;
 800107e:	6243      	str	r3, [r0, #36]	; 0x24
}
 8001080:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

08001084 <i2c_reset>:
 * @param[in] i2c Unsigned int32. I2C peripheral identifier @ref i2c_reg_base.
 */

void i2c_reset(uint32_t i2c)
{
	switch (i2c) {
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <i2c_reset+0x24>)
{
 8001086:	b510      	push	{r4, lr}
	switch (i2c) {
 8001088:	4298      	cmp	r0, r3
 800108a:	d009      	beq.n	80010a0 <i2c_reset+0x1c>
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <i2c_reset+0x28>)
 800108e:	4298      	cmp	r0, r3
 8001090:	d008      	beq.n	80010a4 <i2c_reset+0x20>
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <i2c_reset+0x2c>)
 8001094:	4298      	cmp	r0, r3
 8001096:	d102      	bne.n	800109e <i2c_reset+0x1a>
	case I2C1:
		rcc_periph_reset_pulse(RST_I2C1);
 8001098:	4806      	ldr	r0, [pc, #24]	; (80010b4 <i2c_reset+0x30>)
		rcc_periph_reset_pulse(RST_I2C2);
		break;
#endif
#if defined(I2C3_BASE)
	case I2C3:
		rcc_periph_reset_pulse(RST_I2C3);
 800109a:	f000 f955 	bl	8001348 <rcc_periph_reset_pulse>
		break;
#endif
	default:
		break;
	}
}
 800109e:	bd10      	pop	{r4, pc}
		rcc_periph_reset_pulse(RST_I2C2);
 80010a0:	4805      	ldr	r0, [pc, #20]	; (80010b8 <i2c_reset+0x34>)
 80010a2:	e7fa      	b.n	800109a <i2c_reset+0x16>
		rcc_periph_reset_pulse(RST_I2C3);
 80010a4:	4805      	ldr	r0, [pc, #20]	; (80010bc <i2c_reset+0x38>)
 80010a6:	e7f8      	b.n	800109a <i2c_reset+0x16>
 80010a8:	40005800 	.word	0x40005800
 80010ac:	40007800 	.word	0x40007800
 80010b0:	40005400 	.word	0x40005400
 80010b4:	00000515 	.word	0x00000515
 80010b8:	00000516 	.word	0x00000516
 80010bc:	0000051e 	.word	0x0000051e

080010c0 <i2c_peripheral_enable>:
 * @param[in] i2c Unsigned int32. I2C register base address @ref i2c_reg_base.
 */

void i2c_peripheral_enable(uint32_t i2c)
{
	I2C_CR1(i2c) |= I2C_CR1_PE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	6802      	ldr	r2, [r0, #0]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	6003      	str	r3, [r0, #0]
}
 80010c8:	4770      	bx	lr

080010ca <i2c_peripheral_disable>:
 * @param[in] i2c Unsigned int32. I2C register base address @ref i2c_reg_base.
 */

void i2c_peripheral_disable(uint32_t i2c)
{
	I2C_CR1(i2c) &= ~I2C_CR1_PE;
 80010ca:	2201      	movs	r2, #1
 80010cc:	6803      	ldr	r3, [r0, #0]
 80010ce:	4393      	bics	r3, r2
 80010d0:	6003      	str	r3, [r0, #0]
}
 80010d2:	4770      	bx	lr

080010d4 <i2c_send_start>:
 * @param[in] i2c Unsigned int32. I2C register base address @ref i2c_reg_base.
 */

void i2c_send_start(uint32_t i2c)
{
	I2C_CR2(i2c) |= I2C_CR2_START;
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	6842      	ldr	r2, [r0, #4]
 80010d8:	019b      	lsls	r3, r3, #6
 80010da:	4313      	orrs	r3, r2
 80010dc:	6043      	str	r3, [r0, #4]
}
 80010de:	4770      	bx	lr

080010e0 <i2c_set_prescaler>:
}

/* t_presc= (presc+1)*t_i2cclk */
void i2c_set_prescaler(uint32_t i2c, uint8_t presc)
{
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_PRESC_MASK) |
 80010e0:	6903      	ldr	r3, [r0, #16]
			   (presc << I2C_TIMINGR_PRESC_SHIFT);
 80010e2:	0709      	lsls	r1, r1, #28
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_PRESC_MASK) |
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	091b      	lsrs	r3, r3, #4
 80010e8:	430b      	orrs	r3, r1
 80010ea:	6103      	str	r3, [r0, #16]
}
 80010ec:	4770      	bx	lr
	...

080010f0 <i2c_set_data_setup_time>:

void i2c_set_data_setup_time(uint32_t i2c, uint8_t s_time)
{
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_SCLDEL_MASK) |
 80010f0:	6903      	ldr	r3, [r0, #16]
 80010f2:	4a03      	ldr	r2, [pc, #12]	; (8001100 <i2c_set_data_setup_time+0x10>)
			   (s_time << I2C_TIMINGR_SCLDEL_SHIFT);
 80010f4:	0509      	lsls	r1, r1, #20
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_SCLDEL_MASK) |
 80010f6:	4013      	ands	r3, r2
 80010f8:	430b      	orrs	r3, r1
 80010fa:	6103      	str	r3, [r0, #16]
}
 80010fc:	4770      	bx	lr
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	ff0fffff 	.word	0xff0fffff

08001104 <i2c_set_data_hold_time>:

void i2c_set_data_hold_time(uint32_t i2c, uint8_t h_time)
{
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_SDADEL_MASK) |
 8001104:	6903      	ldr	r3, [r0, #16]
 8001106:	4a03      	ldr	r2, [pc, #12]	; (8001114 <i2c_set_data_hold_time+0x10>)
			   (h_time << I2C_TIMINGR_SDADEL_SHIFT);
 8001108:	0409      	lsls	r1, r1, #16
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_SDADEL_MASK) |
 800110a:	4013      	ands	r3, r2
 800110c:	430b      	orrs	r3, r1
 800110e:	6103      	str	r3, [r0, #16]
}
 8001110:	4770      	bx	lr
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	fff0ffff 	.word	0xfff0ffff

08001118 <i2c_set_scl_high_period>:

void i2c_set_scl_high_period(uint32_t i2c, uint8_t period)
{
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_SCLH_MASK) |
 8001118:	6903      	ldr	r3, [r0, #16]
 800111a:	4a03      	ldr	r2, [pc, #12]	; (8001128 <i2c_set_scl_high_period+0x10>)
			   (period << I2C_TIMINGR_SCLH_SHIFT);
 800111c:	0209      	lsls	r1, r1, #8
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_SCLH_MASK) |
 800111e:	4013      	ands	r3, r2
 8001120:	430b      	orrs	r3, r1
 8001122:	6103      	str	r3, [r0, #16]
}
 8001124:	4770      	bx	lr
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	ffff00ff 	.word	0xffff00ff

0800112c <i2c_set_scl_low_period>:

void i2c_set_scl_low_period(uint32_t i2c, uint8_t period)
{
	I2C_TIMINGR(i2c) = (I2C_TIMINGR(i2c) & ~I2C_TIMINGR_SCLL_MASK) |
 800112c:	22ff      	movs	r2, #255	; 0xff
 800112e:	6903      	ldr	r3, [r0, #16]
 8001130:	4393      	bics	r3, r2
 8001132:	430b      	orrs	r3, r1
 8001134:	6103      	str	r3, [r0, #16]
			   (period << I2C_TIMINGR_SCLL_SHIFT);
}
 8001136:	4770      	bx	lr

08001138 <i2c_enable_stretching>:

void i2c_enable_stretching(uint32_t i2c)
{
	I2C_CR1(i2c) &= ~I2C_CR1_NOSTRETCH;
 8001138:	6803      	ldr	r3, [r0, #0]
 800113a:	4a02      	ldr	r2, [pc, #8]	; (8001144 <i2c_enable_stretching+0xc>)
 800113c:	4013      	ands	r3, r2
 800113e:	6003      	str	r3, [r0, #0]
}
 8001140:	4770      	bx	lr
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	fffdffff 	.word	0xfffdffff

08001148 <i2c_set_7bit_addr_mode>:
	I2C_CR1(i2c) |= I2C_CR1_NOSTRETCH;
}

void i2c_set_7bit_addr_mode(uint32_t i2c)
{
	I2C_CR2(i2c) &= ~I2C_CR2_ADD10;
 8001148:	6843      	ldr	r3, [r0, #4]
 800114a:	4a02      	ldr	r2, [pc, #8]	; (8001154 <i2c_set_7bit_addr_mode+0xc>)
 800114c:	4013      	ands	r3, r2
 800114e:	6043      	str	r3, [r0, #4]
}
 8001150:	4770      	bx	lr
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	fffff7ff 	.word	0xfffff7ff

08001158 <i2c_set_7bit_address>:
}

void i2c_set_7bit_address(uint32_t i2c, uint8_t addr)
{
	I2C_CR2(i2c) = (I2C_CR2(i2c) & ~I2C_CR2_SADD_7BIT_MASK) |
		       ((addr & 0x7F) << I2C_CR2_SADD_7BIT_SHIFT);
 8001158:	22ff      	movs	r2, #255	; 0xff
	I2C_CR2(i2c) = (I2C_CR2(i2c) & ~I2C_CR2_SADD_7BIT_MASK) |
 800115a:	6843      	ldr	r3, [r0, #4]
		       ((addr & 0x7F) << I2C_CR2_SADD_7BIT_SHIFT);
 800115c:	0049      	lsls	r1, r1, #1
 800115e:	4011      	ands	r1, r2
	I2C_CR2(i2c) = (I2C_CR2(i2c) & ~I2C_CR2_SADD_7BIT_MASK) |
 8001160:	3a01      	subs	r2, #1
 8001162:	4393      	bics	r3, r2
 8001164:	4319      	orrs	r1, r3
 8001166:	6041      	str	r1, [r0, #4]
}
 8001168:	4770      	bx	lr
	...

0800116c <i2c_set_write_transfer_dir>:
		       ((addr & 0x3FF) << I2C_CR2_SADD_10BIT_SHIFT);
}

void i2c_set_write_transfer_dir(uint32_t i2c)
{
	I2C_CR2(i2c) &= ~I2C_CR2_RD_WRN;
 800116c:	6843      	ldr	r3, [r0, #4]
 800116e:	4a02      	ldr	r2, [pc, #8]	; (8001178 <i2c_set_write_transfer_dir+0xc>)
 8001170:	4013      	ands	r3, r2
 8001172:	6043      	str	r3, [r0, #4]
}
 8001174:	4770      	bx	lr
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	fffffbff 	.word	0xfffffbff

0800117c <i2c_set_read_transfer_dir>:

void i2c_set_read_transfer_dir(uint32_t i2c)
{
	I2C_CR2(i2c) |= I2C_CR2_RD_WRN;
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	6842      	ldr	r2, [r0, #4]
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4313      	orrs	r3, r2
 8001184:	6043      	str	r3, [r0, #4]
}
 8001186:	4770      	bx	lr

08001188 <i2c_set_bytes_to_transfer>:

void i2c_set_bytes_to_transfer(uint32_t i2c, uint32_t n_bytes)
{
	I2C_CR2(i2c) = (I2C_CR2(i2c) & ~I2C_CR2_NBYTES_MASK) |
 8001188:	6843      	ldr	r3, [r0, #4]
 800118a:	4a03      	ldr	r2, [pc, #12]	; (8001198 <i2c_set_bytes_to_transfer+0x10>)
		       (n_bytes << I2C_CR2_NBYTES_SHIFT);
 800118c:	0409      	lsls	r1, r1, #16
	I2C_CR2(i2c) = (I2C_CR2(i2c) & ~I2C_CR2_NBYTES_MASK) |
 800118e:	4013      	ands	r3, r2
 8001190:	430b      	orrs	r3, r1
 8001192:	6043      	str	r3, [r0, #4]
}
 8001194:	4770      	bx	lr
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	ff00ffff 	.word	0xff00ffff

0800119c <i2c_enable_autoend>:
	return (I2C_CR2(i2c) & I2C_CR2_START);
}

void i2c_enable_autoend(uint32_t i2c)
{
	I2C_CR2(i2c) |= I2C_CR2_AUTOEND;
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	6842      	ldr	r2, [r0, #4]
 80011a0:	049b      	lsls	r3, r3, #18
 80011a2:	4313      	orrs	r3, r2
 80011a4:	6043      	str	r3, [r0, #4]
}
 80011a6:	4770      	bx	lr

080011a8 <i2c_disable_autoend>:

void i2c_disable_autoend(uint32_t i2c)
{
	I2C_CR2(i2c) &= ~I2C_CR2_AUTOEND;
 80011a8:	6843      	ldr	r3, [r0, #4]
 80011aa:	4a02      	ldr	r2, [pc, #8]	; (80011b4 <i2c_disable_autoend+0xc>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	6043      	str	r3, [r0, #4]
}
 80011b0:	4770      	bx	lr
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	fdffffff 	.word	0xfdffffff

080011b8 <i2c_nack>:

bool i2c_nack(uint32_t i2c)
{
	return (I2C_ISR(i2c) & I2C_ISR_NACKF);
 80011b8:	6980      	ldr	r0, [r0, #24]
 80011ba:	06c0      	lsls	r0, r0, #27
 80011bc:	0fc0      	lsrs	r0, r0, #31
}
 80011be:	4770      	bx	lr

080011c0 <i2c_transmit_int_status>:
	return (I2C_ISR(i2c) & I2C_ISR_BUSY);
}

bool i2c_transmit_int_status(uint32_t i2c)
{
	return (I2C_ISR(i2c) & I2C_ISR_TXIS);
 80011c0:	6980      	ldr	r0, [r0, #24]
 80011c2:	0780      	lsls	r0, r0, #30
 80011c4:	0fc0      	lsrs	r0, r0, #31
}
 80011c6:	4770      	bx	lr

080011c8 <i2c_transfer_complete>:

bool i2c_transfer_complete(uint32_t i2c)
{
	return (I2C_ISR(i2c) & I2C_ISR_TC);
 80011c8:	6980      	ldr	r0, [r0, #24]
 80011ca:	0640      	lsls	r0, r0, #25
 80011cc:	0fc0      	lsrs	r0, r0, #31
}
 80011ce:	4770      	bx	lr

080011d0 <i2c_received_data>:

bool i2c_received_data(uint32_t i2c)
{
	return (I2C_ISR(i2c) & I2C_ISR_RXNE);
 80011d0:	6980      	ldr	r0, [r0, #24]
 80011d2:	0740      	lsls	r0, r0, #29
 80011d4:	0fc0      	lsrs	r0, r0, #31
}
 80011d6:	4770      	bx	lr

080011d8 <i2c_transfer7>:
 * @param wn length of w
 * @param r destination buffer to read into
 * @param rn number of bytes to read (r should be at least this long)
 */
void i2c_transfer7(uint32_t i2c, uint8_t addr, uint8_t *w, size_t wn, uint8_t *r, size_t rn)
{
 80011d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011da:	0004      	movs	r4, r0
 80011dc:	000f      	movs	r7, r1
 80011de:	0015      	movs	r5, r2
 80011e0:	1e1e      	subs	r6, r3, #0
	/*  waiting for busy is unnecessary. read the RM */
	if (wn) {
 80011e2:	d04e      	beq.n	8001282 <i2c_transfer7+0xaa>
		i2c_set_7bit_address(i2c, addr);
 80011e4:	f7ff ffb8 	bl	8001158 <i2c_set_7bit_address>
		i2c_set_write_transfer_dir(i2c);
 80011e8:	0020      	movs	r0, r4
 80011ea:	f7ff ffbf 	bl	800116c <i2c_set_write_transfer_dir>
		i2c_set_bytes_to_transfer(i2c, wn);
 80011ee:	0020      	movs	r0, r4
 80011f0:	0031      	movs	r1, r6
 80011f2:	f7ff ffc9 	bl	8001188 <i2c_set_bytes_to_transfer>
		if (rn) {
 80011f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
			i2c_disable_autoend(i2c);
 80011f8:	0020      	movs	r0, r4
		if (rn) {
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d02e      	beq.n	800125c <i2c_transfer7+0x84>
			i2c_disable_autoend(i2c);
 80011fe:	f7ff ffd3 	bl	80011a8 <i2c_disable_autoend>
		} else {
			i2c_enable_autoend(i2c);
		}
		i2c_send_start(i2c);
 8001202:	0020      	movs	r0, r4
 8001204:	f7ff ff66 	bl	80010d4 <i2c_send_start>

		while (wn--) {
 8001208:	19ae      	adds	r6, r5, r6
 800120a:	42b5      	cmp	r5, r6
 800120c:	d129      	bne.n	8001262 <i2c_transfer7+0x8a>
			i2c_send_data(i2c, *w++);
		}
		/* not entirely sure this is really necessary.
		 * RM implies it will stall until it can write out the later bits
		 */
		if (rn) {
 800120e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001210:	2b00      	cmp	r3, #0
 8001212:	d039      	beq.n	8001288 <i2c_transfer7+0xb0>
			while (!i2c_transfer_complete(i2c));
 8001214:	0020      	movs	r0, r4
 8001216:	f7ff ffd7 	bl	80011c8 <i2c_transfer_complete>
 800121a:	2800      	cmp	r0, #0
 800121c:	d0fa      	beq.n	8001214 <i2c_transfer7+0x3c>
		}
	}

	if (rn) {
		/* Setting transfer properties */
		i2c_set_7bit_address(i2c, addr);
 800121e:	0039      	movs	r1, r7
 8001220:	0020      	movs	r0, r4
 8001222:	f7ff ff99 	bl	8001158 <i2c_set_7bit_address>
		i2c_set_read_transfer_dir(i2c);
 8001226:	0020      	movs	r0, r4
 8001228:	f7ff ffa8 	bl	800117c <i2c_set_read_transfer_dir>
		i2c_set_bytes_to_transfer(i2c, rn);
 800122c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800122e:	0020      	movs	r0, r4
 8001230:	f7ff ffaa 	bl	8001188 <i2c_set_bytes_to_transfer>
		/* start transfer */
		i2c_send_start(i2c);
 8001234:	0020      	movs	r0, r4
 8001236:	f7ff ff4d 	bl	80010d4 <i2c_send_start>
		/* important to do it afterwards to do a proper repeated start! */
		i2c_enable_autoend(i2c);
 800123a:	0020      	movs	r0, r4
 800123c:	f7ff ffae 	bl	800119c <i2c_enable_autoend>

		for (size_t i = 0; i < rn; i++) {
 8001240:	2500      	movs	r5, #0
			while (i2c_received_data(i2c) == 0);
 8001242:	0020      	movs	r0, r4
 8001244:	f7ff ffc4 	bl	80011d0 <i2c_received_data>
 8001248:	2800      	cmp	r0, #0
 800124a:	d0fa      	beq.n	8001242 <i2c_transfer7+0x6a>
	return I2C_RXDR(i2c) & 0xff;
 800124c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800124e:	9a08      	ldr	r2, [sp, #32]
 8001250:	5553      	strb	r3, [r2, r5]
		for (size_t i = 0; i < rn; i++) {
 8001252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001254:	3501      	adds	r5, #1
 8001256:	42ab      	cmp	r3, r5
 8001258:	d8f3      	bhi.n	8001242 <i2c_transfer7+0x6a>
 800125a:	e015      	b.n	8001288 <i2c_transfer7+0xb0>
			i2c_enable_autoend(i2c);
 800125c:	f7ff ff9e 	bl	800119c <i2c_enable_autoend>
 8001260:	e7cf      	b.n	8001202 <i2c_transfer7+0x2a>
				if (i2c_transmit_int_status(i2c)) {
 8001262:	0020      	movs	r0, r4
 8001264:	f7ff ffac 	bl	80011c0 <i2c_transmit_int_status>
 8001268:	9001      	str	r0, [sp, #4]
				while (i2c_nack(i2c)); /* FIXME Some error */
 800126a:	0020      	movs	r0, r4
 800126c:	f7ff ffa4 	bl	80011b8 <i2c_nack>
 8001270:	2800      	cmp	r0, #0
 8001272:	d1fa      	bne.n	800126a <i2c_transfer7+0x92>
			while (wait) {
 8001274:	9b01      	ldr	r3, [sp, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f3      	beq.n	8001262 <i2c_transfer7+0x8a>
	I2C_TXDR(i2c) = data;
 800127a:	782b      	ldrb	r3, [r5, #0]
 800127c:	3501      	adds	r5, #1
 800127e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8001280:	e7c3      	b.n	800120a <i2c_transfer7+0x32>
	if (rn) {
 8001282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1ca      	bne.n	800121e <i2c_transfer7+0x46>
			r[i] = i2c_get_data(i2c);
		}
	}
}
 8001288:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

0800128a <i2c_set_speed>:
 * @param i2c peripheral, eg I2C1
 * @param speed one of the listed speed modes @ref i2c_speeds
 * @param clock_megahz i2c peripheral clock speed in MHz. Usually, rcc_apb1_frequency / 1e6
 */
void i2c_set_speed(uint32_t i2c, enum i2c_speeds speed, uint32_t clock_megahz)
{
 800128a:	b510      	push	{r4, lr}
 800128c:	0004      	movs	r4, r0
	int prescaler;
	switch(speed) {
 800128e:	2901      	cmp	r1, #1
 8001290:	d014      	beq.n	80012bc <i2c_set_speed+0x32>
 8001292:	2902      	cmp	r1, #2
 8001294:	d027      	beq.n	80012e6 <i2c_set_speed+0x5c>
		break;
	default:
		/* fall back to standard mode */
	case i2c_speed_sm_100k:
		/* target 4Mhz input, so tpresc = 250ns */
		prescaler = (clock_megahz / 4) - 1;
 8001296:	0891      	lsrs	r1, r2, #2
 8001298:	3901      	subs	r1, #1
		i2c_set_prescaler(i2c, prescaler);
 800129a:	b2c9      	uxtb	r1, r1
 800129c:	f7ff ff20 	bl	80010e0 <i2c_set_prescaler>
		i2c_set_scl_low_period(i2c, 20-1); // 5usecs
 80012a0:	2113      	movs	r1, #19
 80012a2:	0020      	movs	r0, r4
 80012a4:	f7ff ff42 	bl	800112c <i2c_set_scl_low_period>
		i2c_set_scl_high_period(i2c, 16-1); // 4usecs
 80012a8:	210f      	movs	r1, #15
 80012aa:	0020      	movs	r0, r4
 80012ac:	f7ff ff34 	bl	8001118 <i2c_set_scl_high_period>
		i2c_set_data_hold_time(i2c, 2); // 0.5usecs
 80012b0:	2102      	movs	r1, #2
 80012b2:	0020      	movs	r0, r4
 80012b4:	f7ff ff26 	bl	8001104 <i2c_set_data_hold_time>
		i2c_set_data_setup_time(i2c, 5-1); // 1.25usecs
 80012b8:	2104      	movs	r1, #4
 80012ba:	e011      	b.n	80012e0 <i2c_set_speed+0x56>
		prescaler = clock_megahz / 8 - 1;
 80012bc:	08d1      	lsrs	r1, r2, #3
 80012be:	3901      	subs	r1, #1
		i2c_set_prescaler(i2c, prescaler);
 80012c0:	b2c9      	uxtb	r1, r1
 80012c2:	f7ff ff0d 	bl	80010e0 <i2c_set_prescaler>
		i2c_set_scl_low_period(i2c, 10-1); // 1250ns
 80012c6:	2109      	movs	r1, #9
 80012c8:	0020      	movs	r0, r4
 80012ca:	f7ff ff2f 	bl	800112c <i2c_set_scl_low_period>
		i2c_set_scl_high_period(i2c, 4-1); // 500ns
 80012ce:	2103      	movs	r1, #3
 80012d0:	0020      	movs	r0, r4
 80012d2:	f7ff ff21 	bl	8001118 <i2c_set_scl_high_period>
		i2c_set_data_hold_time(i2c, 3); // 375ns
 80012d6:	2103      	movs	r1, #3
 80012d8:	0020      	movs	r0, r4
 80012da:	f7ff ff13 	bl	8001104 <i2c_set_data_hold_time>
		i2c_set_data_setup_time(i2c, 4-1); // 500ns
 80012de:	2103      	movs	r1, #3
		i2c_set_data_setup_time(i2c, 5-1); // 1.25usecs
 80012e0:	0020      	movs	r0, r4
 80012e2:	f7ff ff05 	bl	80010f0 <i2c_set_data_setup_time>
		break;
	}
}
 80012e6:	bd10      	pop	{r4, pc}

080012e8 <rcc_set_ppre1>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb1pre
 */

void rcc_set_ppre1(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 80012e8:	4a03      	ldr	r2, [pc, #12]	; (80012f8 <rcc_set_ppre1+0x10>)
 80012ea:	4904      	ldr	r1, [pc, #16]	; (80012fc <rcc_set_ppre1+0x14>)
 80012ec:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE1_MASK << RCC_CFGR_PPRE1_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 80012ee:	0200      	lsls	r0, r0, #8
	uint32_t reg = RCC_CFGR
 80012f0:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE1_SHIFT);
 80012f2:	4318      	orrs	r0, r3
 80012f4:	6010      	str	r0, [r2, #0]
}
 80012f6:	4770      	bx	lr
 80012f8:	4002100c 	.word	0x4002100c
 80012fc:	fffff8ff 	.word	0xfffff8ff

08001300 <rcc_set_ppre2>:
 * @param[in] ppre APB prescale factor @ref rcc_cfgr_apb2pre
 */

void rcc_set_ppre2(uint32_t ppre)
{
	uint32_t reg = RCC_CFGR
 8001300:	4a03      	ldr	r2, [pc, #12]	; (8001310 <rcc_set_ppre2+0x10>)
 8001302:	4904      	ldr	r1, [pc, #16]	; (8001314 <rcc_set_ppre2+0x14>)
 8001304:	6813      	ldr	r3, [r2, #0]
		       & ~(RCC_CFGR_PPRE2_MASK << RCC_CFGR_PPRE2_SHIFT);
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 8001306:	02c0      	lsls	r0, r0, #11
	uint32_t reg = RCC_CFGR
 8001308:	400b      	ands	r3, r1
	RCC_CFGR = reg | (ppre << RCC_CFGR_PPRE2_SHIFT);
 800130a:	4318      	orrs	r0, r3
 800130c:	6010      	str	r0, [r2, #0]
}
 800130e:	4770      	bx	lr
 8001310:	4002100c 	.word	0x4002100c
 8001314:	ffffc7ff 	.word	0xffffc7ff

08001318 <rcc_set_hpre>:
 * @param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
 */

void rcc_set_hpre(uint32_t hpre)
{
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 8001318:	21f0      	movs	r1, #240	; 0xf0
 800131a:	4a03      	ldr	r2, [pc, #12]	; (8001328 <rcc_set_hpre+0x10>)
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 800131c:	0100      	lsls	r0, r0, #4
	uint32_t reg = RCC_CFGR & ~(RCC_CFGR_HPRE_MASK << RCC_CFGR_HPRE_SHIFT);
 800131e:	6813      	ldr	r3, [r2, #0]
 8001320:	438b      	bics	r3, r1
	RCC_CFGR = reg | (hpre << RCC_CFGR_HPRE_SHIFT);
 8001322:	4318      	orrs	r0, r3
 8001324:	6010      	str	r0, [r2, #0]
}
 8001326:	4770      	bx	lr
 8001328:	4002100c 	.word	0x4002100c

0800132c <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <rcc_periph_clock_enable+0x18>)
 800132e:	0942      	lsrs	r2, r0, #5
 8001330:	18d2      	adds	r2, r2, r3
 8001332:	231f      	movs	r3, #31
 8001334:	4018      	ands	r0, r3
 8001336:	3b1e      	subs	r3, #30
 8001338:	4083      	lsls	r3, r0
 800133a:	6811      	ldr	r1, [r2, #0]
 800133c:	430b      	orrs	r3, r1
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	4770      	bx	lr
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	40021000 	.word	0x40021000

08001348 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <rcc_periph_reset_pulse+0x1c>)
 800134a:	0943      	lsrs	r3, r0, #5
 800134c:	189b      	adds	r3, r3, r2
 800134e:	221f      	movs	r2, #31
 8001350:	4010      	ands	r0, r2
 8001352:	3a1e      	subs	r2, #30
 8001354:	4082      	lsls	r2, r0
 8001356:	6819      	ldr	r1, [r3, #0]
 8001358:	4311      	orrs	r1, r2
 800135a:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 800135c:	6819      	ldr	r1, [r3, #0]
 800135e:	4391      	bics	r1, r2
 8001360:	6019      	str	r1, [r3, #0]
}
 8001362:	4770      	bx	lr
 8001364:	40021000 	.word	0x40021000

08001368 <spi_reset>:
@param[in] spi_peripheral Unsigned int32. SPI peripheral identifier @ref
spi_reg_base.
*/

void spi_reset(uint32_t spi_peripheral)
{	switch (spi_peripheral) {
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <spi_reset+0x1c>)
 800136a:	b510      	push	{r4, lr}
 800136c:	4298      	cmp	r0, r3
 800136e:	d006      	beq.n	800137e <spi_reset+0x16>
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <spi_reset+0x20>)
 8001372:	4298      	cmp	r0, r3
 8001374:	d102      	bne.n	800137c <spi_reset+0x14>
#if defined(SPI1_BASE)
	case SPI1_BASE:
		rcc_periph_reset_pulse(RST_SPI1);
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <spi_reset+0x24>)
		break;
#endif
#if defined(SPI2_BASE)
	case SPI2_BASE:
		rcc_periph_reset_pulse(RST_SPI2);
 8001378:	f7ff ffe6 	bl	8001348 <rcc_periph_reset_pulse>
		break;
#endif
	default:
		break;
	}
}
 800137c:	bd10      	pop	{r4, pc}
		rcc_periph_reset_pulse(RST_SPI2);
 800137e:	4804      	ldr	r0, [pc, #16]	; (8001390 <spi_reset+0x28>)
 8001380:	e7fa      	b.n	8001378 <spi_reset+0x10>
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	40003800 	.word	0x40003800
 8001388:	40013000 	.word	0x40013000
 800138c:	0000048c 	.word	0x0000048c
 8001390:	0000050e 	.word	0x0000050e

08001394 <spi_enable>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_enable(uint32_t spi)
{
	SPI_CR1(spi) |= SPI_CR1_SPE; /* Enable SPI. */
 8001394:	2340      	movs	r3, #64	; 0x40
 8001396:	6802      	ldr	r2, [r0, #0]
 8001398:	4313      	orrs	r3, r2
 800139a:	6003      	str	r3, [r0, #0]
}
 800139c:	4770      	bx	lr

0800139e <spi_xfer>:
uint16_t spi_xfer(uint32_t spi, uint16_t data)
{
	spi_write(spi, data);

	/* Wait for transfer finished. */
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 800139e:	2301      	movs	r3, #1
	SPI_DR(spi) = data;
 80013a0:	60c1      	str	r1, [r0, #12]
	while (!(SPI_SR(spi) & SPI_SR_RXNE));
 80013a2:	6882      	ldr	r2, [r0, #8]
 80013a4:	421a      	tst	r2, r3
 80013a6:	d0fc      	beq.n	80013a2 <spi_xfer+0x4>

	/* Read the data (8 or 16 bits, depending on DFF bit) from DR. */
	return SPI_DR(spi);
 80013a8:	68c0      	ldr	r0, [r0, #12]
 80013aa:	b280      	uxth	r0, r0
}
 80013ac:	4770      	bx	lr

080013ae <spi_enable_ss_output>:
@param[in] spi Unsigned int32. SPI peripheral identifier @ref spi_reg_base.
*/

void spi_enable_ss_output(uint32_t spi)
{
	SPI_CR2(spi) |= SPI_CR2_SSOE;
 80013ae:	2304      	movs	r3, #4
 80013b0:	6842      	ldr	r2, [r0, #4]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	6043      	str	r3, [r0, #4]
}
 80013b6:	4770      	bx	lr

080013b8 <spi_init_master>:
@returns int. Error code.
*/

int spi_init_master(uint32_t spi, uint32_t br, uint32_t cpol, uint32_t cpha,
		    uint32_t dff, uint32_t lsbfirst)
{
 80013b8:	b530      	push	{r4, r5, lr}
	uint32_t reg32 = SPI_CR1(spi);

	/* Reset all bits omitting SPE, CRCEN and CRCNEXT bits. */
	reg32 &= SPI_CR1_SPE | SPI_CR1_CRCEN | SPI_CR1_CRCNEXT;
 80013ba:	25c1      	movs	r5, #193	; 0xc1
	uint32_t reg32 = SPI_CR1(spi);
 80013bc:	6804      	ldr	r4, [r0, #0]
	reg32 &= SPI_CR1_SPE | SPI_CR1_CRCEN | SPI_CR1_CRCNEXT;
 80013be:	01ad      	lsls	r5, r5, #6
 80013c0:	402c      	ands	r4, r5
 80013c2:	9d04      	ldr	r5, [sp, #16]
 80013c4:	432c      	orrs	r4, r5
 80013c6:	9d03      	ldr	r5, [sp, #12]
 80013c8:	432c      	orrs	r4, r5
 80013ca:	431c      	orrs	r4, r3

	reg32 |= br;		/* Set baud rate bits. */
	reg32 |= cpol;		/* Set CPOL value. */
	reg32 |= cpha;		/* Set CPHA value. */
	reg32 |= dff;		/* Set data format (8 or 16 bits). */
	reg32 |= lsbfirst;	/* Set frame format (LSB- or MSB-first). */
 80013cc:	2304      	movs	r3, #4
 80013ce:	4314      	orrs	r4, r2

	SPI_CR2(spi) |= SPI_CR2_SSOE; /* common case */
 80013d0:	6842      	ldr	r2, [r0, #4]
 80013d2:	430c      	orrs	r4, r1
	reg32 |= lsbfirst;	/* Set frame format (LSB- or MSB-first). */
 80013d4:	431c      	orrs	r4, r3
	SPI_CR2(spi) |= SPI_CR2_SSOE; /* common case */
 80013d6:	4313      	orrs	r3, r2
 80013d8:	6043      	str	r3, [r0, #4]
	SPI_CR1(spi) = reg32;
 80013da:	6004      	str	r4, [r0, #0]

	return 0;
}
 80013dc:	2000      	movs	r0, #0
 80013de:	bd30      	pop	{r4, r5, pc}

080013e0 <blocking_handler>:

}

void blocking_handler(void)
{
	while (1);
 80013e0:	e7fe      	b.n	80013e0 <blocking_handler>

080013e2 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 80013e2:	4770      	bx	lr

080013e4 <reset_handler>:
{
 80013e4:	b510      	push	{r4, lr}
	for (src = &_data_loadaddr, dest = &_data;
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <reset_handler+0x5c>)
 80013e8:	4a16      	ldr	r2, [pc, #88]	; (8001444 <reset_handler+0x60>)
 80013ea:	4917      	ldr	r1, [pc, #92]	; (8001448 <reset_handler+0x64>)
 80013ec:	428b      	cmp	r3, r1
 80013ee:	d318      	bcc.n	8001422 <reset_handler+0x3e>
		*dest++ = 0;
 80013f0:	2100      	movs	r1, #0
	while (dest < &_ebss) {
 80013f2:	4a16      	ldr	r2, [pc, #88]	; (800144c <reset_handler+0x68>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d317      	bcc.n	8001428 <reset_handler+0x44>
	SCB_CCR |= SCB_CCR_STKALIGN;
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	4a15      	ldr	r2, [pc, #84]	; (8001450 <reset_handler+0x6c>)
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	6811      	ldr	r1, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001400:	4c14      	ldr	r4, [pc, #80]	; (8001454 <reset_handler+0x70>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8001402:	430b      	orrs	r3, r1
 8001404:	6013      	str	r3, [r2, #0]
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <reset_handler+0x74>)
 8001408:	429c      	cmp	r4, r3
 800140a:	d30f      	bcc.n	800142c <reset_handler+0x48>
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 800140c:	4c13      	ldr	r4, [pc, #76]	; (800145c <reset_handler+0x78>)
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <reset_handler+0x7c>)
 8001410:	429c      	cmp	r4, r3
 8001412:	d30e      	bcc.n	8001432 <reset_handler+0x4e>
	(void)main();
 8001414:	f7fe ffde 	bl	80003d4 <main>
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8001418:	4c12      	ldr	r4, [pc, #72]	; (8001464 <reset_handler+0x80>)
 800141a:	4b13      	ldr	r3, [pc, #76]	; (8001468 <reset_handler+0x84>)
 800141c:	429c      	cmp	r4, r3
 800141e:	d30b      	bcc.n	8001438 <reset_handler+0x54>
}
 8001420:	bd10      	pop	{r4, pc}
		*dest = *src;
 8001422:	ca01      	ldmia	r2!, {r0}
 8001424:	c301      	stmia	r3!, {r0}
		src++, dest++) {
 8001426:	e7e1      	b.n	80013ec <reset_handler+0x8>
		*dest++ = 0;
 8001428:	c302      	stmia	r3!, {r1}
 800142a:	e7e3      	b.n	80013f4 <reset_handler+0x10>
		(*fp)();
 800142c:	cc08      	ldmia	r4!, {r3}
 800142e:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8001430:	e7e9      	b.n	8001406 <reset_handler+0x22>
		(*fp)();
 8001432:	cc08      	ldmia	r4!, {r3}
 8001434:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8001436:	e7ea      	b.n	800140e <reset_handler+0x2a>
		(*fp)();
 8001438:	cc08      	ldmia	r4!, {r3}
 800143a:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 800143c:	e7ed      	b.n	800141a <reset_handler+0x36>
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	20000000 	.word	0x20000000
 8001444:	080019a8 	.word	0x080019a8
 8001448:	20000000 	.word	0x20000000
 800144c:	20000060 	.word	0x20000060
 8001450:	e000ed14 	.word	0xe000ed14
 8001454:	080019a8 	.word	0x080019a8
 8001458:	080019a8 	.word	0x080019a8
 800145c:	080019a8 	.word	0x080019a8
 8001460:	080019a8 	.word	0x080019a8
 8001464:	080019a8 	.word	0x080019a8
 8001468:	080019a8 	.word	0x080019a8

0800146c <systick_set_reload>:
 * @param[in] value uint32_t. 24 bit reload value.
 */

void systick_set_reload(uint32_t value)
{
	STK_RVR = (value & STK_RVR_RELOAD);
 800146c:	4b02      	ldr	r3, [pc, #8]	; (8001478 <systick_set_reload+0xc>)
 800146e:	0200      	lsls	r0, r0, #8
 8001470:	0a00      	lsrs	r0, r0, #8
 8001472:	6018      	str	r0, [r3, #0]
}
 8001474:	4770      	bx	lr
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	e000e014 	.word	0xe000e014

0800147c <systick_set_clocksource>:
 * @param[in] clocksource uint8_t. Clock source from @ref systick_clksource.
 */

void systick_set_clocksource(uint8_t clocksource)
{
	STK_CSR = (STK_CSR & ~STK_CSR_CLKSOURCE) |
 800147c:	2104      	movs	r1, #4
 800147e:	4a03      	ldr	r2, [pc, #12]	; (800148c <systick_set_clocksource+0x10>)
		  (clocksource & STK_CSR_CLKSOURCE);
 8001480:	4008      	ands	r0, r1
	STK_CSR = (STK_CSR & ~STK_CSR_CLKSOURCE) |
 8001482:	6813      	ldr	r3, [r2, #0]
 8001484:	438b      	bics	r3, r1
 8001486:	4303      	orrs	r3, r0
 8001488:	6013      	str	r3, [r2, #0]
}
 800148a:	4770      	bx	lr
 800148c:	e000e010 	.word	0xe000e010

08001490 <systick_interrupt_enable>:
 *
 */

void systick_interrupt_enable(void)
{
	STK_CSR |= STK_CSR_TICKINT;
 8001490:	2302      	movs	r3, #2
 8001492:	4a02      	ldr	r2, [pc, #8]	; (800149c <systick_interrupt_enable+0xc>)
 8001494:	6811      	ldr	r1, [r2, #0]
 8001496:	430b      	orrs	r3, r1
 8001498:	6013      	str	r3, [r2, #0]
}
 800149a:	4770      	bx	lr
 800149c:	e000e010 	.word	0xe000e010

080014a0 <systick_counter_enable>:
 *
 */

void systick_counter_enable(void)
{
	STK_CSR |= STK_CSR_ENABLE;
 80014a0:	2301      	movs	r3, #1
 80014a2:	4a02      	ldr	r2, [pc, #8]	; (80014ac <systick_counter_enable+0xc>)
 80014a4:	6811      	ldr	r1, [r2, #0]
 80014a6:	430b      	orrs	r3, r1
 80014a8:	6013      	str	r3, [r2, #0]
}
 80014aa:	4770      	bx	lr
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <systick_clear>:
 * The counter value is cleared. Useful for well defined startup.
 */

void systick_clear(void)
{
	STK_CVR = 0;
 80014b0:	2200      	movs	r2, #0
 80014b2:	4b01      	ldr	r3, [pc, #4]	; (80014b8 <systick_clear+0x8>)
 80014b4:	601a      	str	r2, [r3, #0]
}
 80014b6:	4770      	bx	lr
 80014b8:	e000e018 	.word	0xe000e018

080014bc <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <nvic_enable_irq+0x14>)
 80014be:	0943      	lsrs	r3, r0, #5
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	189b      	adds	r3, r3, r2
 80014c4:	221f      	movs	r2, #31
 80014c6:	4010      	ands	r0, r2
 80014c8:	3a1e      	subs	r2, #30
 80014ca:	4082      	lsls	r2, r0
 80014cc:	601a      	str	r2, [r3, #0]
}
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100

080014d4 <nvic_disable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
 */

void nvic_disable_irq(uint8_t irqn)
{
	NVIC_ICER(irqn / 32) = (1 << (irqn % 32));
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <nvic_disable_irq+0x14>)
 80014d6:	0943      	lsrs	r3, r0, #5
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	189b      	adds	r3, r3, r2
 80014dc:	221f      	movs	r2, #31
 80014de:	4010      	ands	r0, r2
 80014e0:	3a1e      	subs	r2, #30
 80014e2:	4082      	lsls	r2, r0
 80014e4:	601a      	str	r2, [r3, #0]
}
 80014e6:	4770      	bx	lr
 80014e8:	e000e180 	.word	0xe000e180

080014ec <nvic_clear_pending_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref CM3_nvic_defines_irqs
 */

void nvic_clear_pending_irq(uint8_t irqn)
{
	NVIC_ICPR(irqn / 32) = (1 << (irqn % 32));
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <nvic_clear_pending_irq+0x14>)
 80014ee:	0943      	lsrs	r3, r0, #5
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	189b      	adds	r3, r3, r2
 80014f4:	221f      	movs	r2, #31
 80014f6:	4010      	ands	r0, r2
 80014f8:	3a1e      	subs	r2, #30
 80014fa:	4082      	lsls	r2, r0
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	4770      	bx	lr
 8001500:	e000e280 	.word	0xe000e280

08001504 <nvic_set_priority>:
 * @param[in] irqn Interrupt number @ref CM3_nvic_defines_irqs
 * @param[in] priority Interrupt priority (0 ... 255 in steps of 16)
 */
#endif
void nvic_set_priority(uint8_t irqn, uint8_t priority)
{
 8001504:	b510      	push	{r4, lr}
	/* code from lpc43xx/nvic.c -- this is quite a hack and alludes to the
	 * negative interrupt numbers assigned to the system interrupts. better
	 * handling would mean signed integers. */
	if (irqn >= NVIC_IRQ_COUNT) {
 8001506:	281f      	cmp	r0, #31
 8001508:	d912      	bls.n	8001530 <nvic_set_priority+0x2c>
		/* Cortex-M  system interrupts */
#if defined(__ARM_ARCH_6M__)
		/* ARM6M supports only 32bit word access to SHPR registers */
		irqn = (irqn & 0xF) - 4;
 800150a:	230f      	movs	r3, #15
 800150c:	4018      	ands	r0, r3
 800150e:	3804      	subs	r0, #4
 8001510:	b2c0      	uxtb	r0, r0
		uint8_t shift = (irqn & 0x3) << 3;
		uint8_t reg = irqn >> 2;
		SCB_SHPR32(reg) = ((SCB_SHPR32(reg) & ~(0xFFUL << shift)) |
 8001512:	0883      	lsrs	r3, r0, #2
 8001514:	4a08      	ldr	r2, [pc, #32]	; (8001538 <nvic_set_priority+0x34>)
 8001516:	009b      	lsls	r3, r3, #2
		/* Device specific interrupts */
#if defined(__ARM_ARCH_6M__)
		/* ARM6M supports only 32bit word access to IPR registers */
		uint8_t shift = (irqn & 0x3) << 3;
		uint8_t reg = irqn >> 2;
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 8001518:	2418      	movs	r4, #24
		uint8_t shift = (irqn & 0x3) << 3;
 800151a:	00c0      	lsls	r0, r0, #3
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 800151c:	4020      	ands	r0, r4
 800151e:	34e7      	adds	r4, #231	; 0xe7
 8001520:	4084      	lsls	r4, r0
				((uint32_t) priority) << shift);
 8001522:	4081      	lsls	r1, r0
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 8001524:	189b      	adds	r3, r3, r2
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	43a2      	bics	r2, r4
 800152a:	4311      	orrs	r1, r2
 800152c:	6019      	str	r1, [r3, #0]
#else
		NVIC_IPR(irqn) = priority;
#endif
	}
}
 800152e:	bd10      	pop	{r4, pc}
		NVIC_IPR32(reg) = ((NVIC_IPR32(reg) & ~(0xFFUL << shift)) |
 8001530:	0883      	lsrs	r3, r0, #2
 8001532:	4a02      	ldr	r2, [pc, #8]	; (800153c <nvic_set_priority+0x38>)
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	e7ef      	b.n	8001518 <nvic_set_priority+0x14>
 8001538:	e000ed18 	.word	0xe000ed18
 800153c:	e000e400 	.word	0xe000e400

08001540 <__itoa>:
 8001540:	1e93      	subs	r3, r2, #2
 8001542:	b510      	push	{r4, lr}
 8001544:	000c      	movs	r4, r1
 8001546:	2b22      	cmp	r3, #34	; 0x22
 8001548:	d904      	bls.n	8001554 <__itoa+0x14>
 800154a:	2300      	movs	r3, #0
 800154c:	001c      	movs	r4, r3
 800154e:	700b      	strb	r3, [r1, #0]
 8001550:	0020      	movs	r0, r4
 8001552:	bd10      	pop	{r4, pc}
 8001554:	2a0a      	cmp	r2, #10
 8001556:	d109      	bne.n	800156c <__itoa+0x2c>
 8001558:	2800      	cmp	r0, #0
 800155a:	da07      	bge.n	800156c <__itoa+0x2c>
 800155c:	232d      	movs	r3, #45	; 0x2d
 800155e:	700b      	strb	r3, [r1, #0]
 8001560:	2101      	movs	r1, #1
 8001562:	4240      	negs	r0, r0
 8001564:	1861      	adds	r1, r4, r1
 8001566:	f000 f80f 	bl	8001588 <__utoa>
 800156a:	e7f1      	b.n	8001550 <__itoa+0x10>
 800156c:	2100      	movs	r1, #0
 800156e:	e7f9      	b.n	8001564 <__itoa+0x24>

08001570 <itoa>:
 8001570:	b510      	push	{r4, lr}
 8001572:	f7ff ffe5 	bl	8001540 <__itoa>
 8001576:	bd10      	pop	{r4, pc}

08001578 <strlen>:
 8001578:	2300      	movs	r3, #0
 800157a:	5cc2      	ldrb	r2, [r0, r3]
 800157c:	3301      	adds	r3, #1
 800157e:	2a00      	cmp	r2, #0
 8001580:	d1fb      	bne.n	800157a <strlen+0x2>
 8001582:	1e58      	subs	r0, r3, #1
 8001584:	4770      	bx	lr
	...

08001588 <__utoa>:
 8001588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158a:	000c      	movs	r4, r1
 800158c:	0016      	movs	r6, r2
 800158e:	b08d      	sub	sp, #52	; 0x34
 8001590:	2225      	movs	r2, #37	; 0x25
 8001592:	0007      	movs	r7, r0
 8001594:	4916      	ldr	r1, [pc, #88]	; (80015f0 <__utoa+0x68>)
 8001596:	a802      	add	r0, sp, #8
 8001598:	f000 f82c 	bl	80015f4 <memcpy>
 800159c:	1e62      	subs	r2, r4, #1
 800159e:	9200      	str	r2, [sp, #0]
 80015a0:	1eb3      	subs	r3, r6, #2
 80015a2:	aa02      	add	r2, sp, #8
 80015a4:	2500      	movs	r5, #0
 80015a6:	9201      	str	r2, [sp, #4]
 80015a8:	2b22      	cmp	r3, #34	; 0x22
 80015aa:	d904      	bls.n	80015b6 <__utoa+0x2e>
 80015ac:	7025      	strb	r5, [r4, #0]
 80015ae:	002c      	movs	r4, r5
 80015b0:	0020      	movs	r0, r4
 80015b2:	b00d      	add	sp, #52	; 0x34
 80015b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b6:	0038      	movs	r0, r7
 80015b8:	0031      	movs	r1, r6
 80015ba:	f000 f86b 	bl	8001694 <__aeabi_uidivmod>
 80015be:	000b      	movs	r3, r1
 80015c0:	9a01      	ldr	r2, [sp, #4]
 80015c2:	0029      	movs	r1, r5
 80015c4:	5cd3      	ldrb	r3, [r2, r3]
 80015c6:	9a00      	ldr	r2, [sp, #0]
 80015c8:	3501      	adds	r5, #1
 80015ca:	5553      	strb	r3, [r2, r5]
 80015cc:	003b      	movs	r3, r7
 80015ce:	0007      	movs	r7, r0
 80015d0:	429e      	cmp	r6, r3
 80015d2:	d9f0      	bls.n	80015b6 <__utoa+0x2e>
 80015d4:	2300      	movs	r3, #0
 80015d6:	0022      	movs	r2, r4
 80015d8:	5563      	strb	r3, [r4, r5]
 80015da:	000b      	movs	r3, r1
 80015dc:	1ac8      	subs	r0, r1, r3
 80015de:	4283      	cmp	r3, r0
 80015e0:	dde6      	ble.n	80015b0 <__utoa+0x28>
 80015e2:	7810      	ldrb	r0, [r2, #0]
 80015e4:	5ce5      	ldrb	r5, [r4, r3]
 80015e6:	7015      	strb	r5, [r2, #0]
 80015e8:	54e0      	strb	r0, [r4, r3]
 80015ea:	3201      	adds	r2, #1
 80015ec:	3b01      	subs	r3, #1
 80015ee:	e7f5      	b.n	80015dc <__utoa+0x54>
 80015f0:	08001980 	.word	0x08001980

080015f4 <memcpy>:
 80015f4:	2300      	movs	r3, #0
 80015f6:	b510      	push	{r4, lr}
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d100      	bne.n	80015fe <memcpy+0xa>
 80015fc:	bd10      	pop	{r4, pc}
 80015fe:	5ccc      	ldrb	r4, [r1, r3]
 8001600:	54c4      	strb	r4, [r0, r3]
 8001602:	3301      	adds	r3, #1
 8001604:	e7f8      	b.n	80015f8 <memcpy+0x4>
	...

08001608 <__gnu_thumb1_case_uqi>:
 8001608:	b402      	push	{r1}
 800160a:	4671      	mov	r1, lr
 800160c:	0849      	lsrs	r1, r1, #1
 800160e:	0049      	lsls	r1, r1, #1
 8001610:	5c09      	ldrb	r1, [r1, r0]
 8001612:	0049      	lsls	r1, r1, #1
 8001614:	448e      	add	lr, r1
 8001616:	bc02      	pop	{r1}
 8001618:	4770      	bx	lr
 800161a:	46c0      	nop			; (mov r8, r8)

0800161c <__udivsi3>:
 800161c:	2900      	cmp	r1, #0
 800161e:	d034      	beq.n	800168a <.udivsi3_skip_div0_test+0x6a>

08001620 <.udivsi3_skip_div0_test>:
 8001620:	2301      	movs	r3, #1
 8001622:	2200      	movs	r2, #0
 8001624:	b410      	push	{r4}
 8001626:	4288      	cmp	r0, r1
 8001628:	d32c      	bcc.n	8001684 <.udivsi3_skip_div0_test+0x64>
 800162a:	2401      	movs	r4, #1
 800162c:	0724      	lsls	r4, r4, #28
 800162e:	42a1      	cmp	r1, r4
 8001630:	d204      	bcs.n	800163c <.udivsi3_skip_div0_test+0x1c>
 8001632:	4281      	cmp	r1, r0
 8001634:	d202      	bcs.n	800163c <.udivsi3_skip_div0_test+0x1c>
 8001636:	0109      	lsls	r1, r1, #4
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	e7f8      	b.n	800162e <.udivsi3_skip_div0_test+0xe>
 800163c:	00e4      	lsls	r4, r4, #3
 800163e:	42a1      	cmp	r1, r4
 8001640:	d204      	bcs.n	800164c <.udivsi3_skip_div0_test+0x2c>
 8001642:	4281      	cmp	r1, r0
 8001644:	d202      	bcs.n	800164c <.udivsi3_skip_div0_test+0x2c>
 8001646:	0049      	lsls	r1, r1, #1
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	e7f8      	b.n	800163e <.udivsi3_skip_div0_test+0x1e>
 800164c:	4288      	cmp	r0, r1
 800164e:	d301      	bcc.n	8001654 <.udivsi3_skip_div0_test+0x34>
 8001650:	1a40      	subs	r0, r0, r1
 8001652:	431a      	orrs	r2, r3
 8001654:	084c      	lsrs	r4, r1, #1
 8001656:	42a0      	cmp	r0, r4
 8001658:	d302      	bcc.n	8001660 <.udivsi3_skip_div0_test+0x40>
 800165a:	1b00      	subs	r0, r0, r4
 800165c:	085c      	lsrs	r4, r3, #1
 800165e:	4322      	orrs	r2, r4
 8001660:	088c      	lsrs	r4, r1, #2
 8001662:	42a0      	cmp	r0, r4
 8001664:	d302      	bcc.n	800166c <.udivsi3_skip_div0_test+0x4c>
 8001666:	1b00      	subs	r0, r0, r4
 8001668:	089c      	lsrs	r4, r3, #2
 800166a:	4322      	orrs	r2, r4
 800166c:	08cc      	lsrs	r4, r1, #3
 800166e:	42a0      	cmp	r0, r4
 8001670:	d302      	bcc.n	8001678 <.udivsi3_skip_div0_test+0x58>
 8001672:	1b00      	subs	r0, r0, r4
 8001674:	08dc      	lsrs	r4, r3, #3
 8001676:	4322      	orrs	r2, r4
 8001678:	2800      	cmp	r0, #0
 800167a:	d003      	beq.n	8001684 <.udivsi3_skip_div0_test+0x64>
 800167c:	091b      	lsrs	r3, r3, #4
 800167e:	d001      	beq.n	8001684 <.udivsi3_skip_div0_test+0x64>
 8001680:	0909      	lsrs	r1, r1, #4
 8001682:	e7e3      	b.n	800164c <.udivsi3_skip_div0_test+0x2c>
 8001684:	0010      	movs	r0, r2
 8001686:	bc10      	pop	{r4}
 8001688:	4770      	bx	lr
 800168a:	b501      	push	{r0, lr}
 800168c:	2000      	movs	r0, #0
 800168e:	f000 f80b 	bl	80016a8 <__aeabi_idiv0>
 8001692:	bd02      	pop	{r1, pc}

08001694 <__aeabi_uidivmod>:
 8001694:	2900      	cmp	r1, #0
 8001696:	d0f8      	beq.n	800168a <.udivsi3_skip_div0_test+0x6a>
 8001698:	b503      	push	{r0, r1, lr}
 800169a:	f7ff ffc1 	bl	8001620 <.udivsi3_skip_div0_test>
 800169e:	bc0e      	pop	{r1, r2, r3}
 80016a0:	4342      	muls	r2, r0
 80016a2:	1a89      	subs	r1, r1, r2
 80016a4:	4718      	bx	r3
 80016a6:	46c0      	nop			; (mov r8, r8)

080016a8 <__aeabi_idiv0>:
 80016a8:	4770      	bx	lr
 80016aa:	46c0      	nop			; (mov r8, r8)

080016ac <__aeabi_fmul>:
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	0fc3      	lsrs	r3, r0, #31
 80016b0:	b085      	sub	sp, #20
 80016b2:	0245      	lsls	r5, r0, #9
 80016b4:	0044      	lsls	r4, r0, #1
 80016b6:	1c0f      	adds	r7, r1, #0
 80016b8:	0a6d      	lsrs	r5, r5, #9
 80016ba:	0e24      	lsrs	r4, r4, #24
 80016bc:	9303      	str	r3, [sp, #12]
 80016be:	9302      	str	r3, [sp, #8]
 80016c0:	d00a      	beq.n	80016d8 <__aeabi_fmul+0x2c>
 80016c2:	2cff      	cmp	r4, #255	; 0xff
 80016c4:	d03c      	beq.n	8001740 <__aeabi_fmul+0x94>
 80016c6:	2080      	movs	r0, #128	; 0x80
 80016c8:	2300      	movs	r3, #0
 80016ca:	00ed      	lsls	r5, r5, #3
 80016cc:	04c0      	lsls	r0, r0, #19
 80016ce:	3c7f      	subs	r4, #127	; 0x7f
 80016d0:	4305      	orrs	r5, r0
 80016d2:	9401      	str	r4, [sp, #4]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	e00e      	b.n	80016f6 <__aeabi_fmul+0x4a>
 80016d8:	2301      	movs	r3, #1
 80016da:	9501      	str	r5, [sp, #4]
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2d00      	cmp	r5, #0
 80016e0:	d009      	beq.n	80016f6 <__aeabi_fmul+0x4a>
 80016e2:	0028      	movs	r0, r5
 80016e4:	f000 f914 	bl	8001910 <__clzsi2>
 80016e8:	1f43      	subs	r3, r0, #5
 80016ea:	409d      	lsls	r5, r3
 80016ec:	2376      	movs	r3, #118	; 0x76
 80016ee:	425b      	negs	r3, r3
 80016f0:	1a1b      	subs	r3, r3, r0
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	9400      	str	r4, [sp, #0]
 80016f6:	027c      	lsls	r4, r7, #9
 80016f8:	007e      	lsls	r6, r7, #1
 80016fa:	0a64      	lsrs	r4, r4, #9
 80016fc:	0e36      	lsrs	r6, r6, #24
 80016fe:	0fff      	lsrs	r7, r7, #31
 8001700:	2e00      	cmp	r6, #0
 8001702:	d024      	beq.n	800174e <__aeabi_fmul+0xa2>
 8001704:	2eff      	cmp	r6, #255	; 0xff
 8001706:	d02e      	beq.n	8001766 <__aeabi_fmul+0xba>
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	0030      	movs	r0, r6
 800170c:	00e4      	lsls	r4, r4, #3
 800170e:	04db      	lsls	r3, r3, #19
 8001710:	431c      	orrs	r4, r3
 8001712:	387f      	subs	r0, #127	; 0x7f
 8001714:	2300      	movs	r3, #0
 8001716:	9901      	ldr	r1, [sp, #4]
 8001718:	9a03      	ldr	r2, [sp, #12]
 800171a:	1846      	adds	r6, r0, r1
 800171c:	9800      	ldr	r0, [sp, #0]
 800171e:	407a      	eors	r2, r7
 8001720:	0080      	lsls	r0, r0, #2
 8001722:	4318      	orrs	r0, r3
 8001724:	3801      	subs	r0, #1
 8001726:	1c71      	adds	r1, r6, #1
 8001728:	280e      	cmp	r0, #14
 800172a:	d838      	bhi.n	800179e <__aeabi_fmul+0xf2>
 800172c:	f7ff ff6c 	bl	8001608 <__gnu_thumb1_case_uqi>
 8001730:	21822323 	.word	0x21822323
 8001734:	2182a221 	.word	0x2182a221
 8001738:	7f8221a2 	.word	0x7f8221a2
 800173c:	7f7f      	.short	0x7f7f
 800173e:	71          	.byte	0x71
 800173f:	00          	.byte	0x00
 8001740:	2302      	movs	r3, #2
 8001742:	9401      	str	r4, [sp, #4]
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2d00      	cmp	r5, #0
 8001748:	d0d5      	beq.n	80016f6 <__aeabi_fmul+0x4a>
 800174a:	3301      	adds	r3, #1
 800174c:	e7c2      	b.n	80016d4 <__aeabi_fmul+0x28>
 800174e:	0020      	movs	r0, r4
 8001750:	2301      	movs	r3, #1
 8001752:	2c00      	cmp	r4, #0
 8001754:	d0df      	beq.n	8001716 <__aeabi_fmul+0x6a>
 8001756:	f000 f8db 	bl	8001910 <__clzsi2>
 800175a:	1f43      	subs	r3, r0, #5
 800175c:	409c      	lsls	r4, r3
 800175e:	2376      	movs	r3, #118	; 0x76
 8001760:	425b      	negs	r3, r3
 8001762:	1a18      	subs	r0, r3, r0
 8001764:	e7d6      	b.n	8001714 <__aeabi_fmul+0x68>
 8001766:	0030      	movs	r0, r6
 8001768:	2302      	movs	r3, #2
 800176a:	2c00      	cmp	r4, #0
 800176c:	d0d3      	beq.n	8001716 <__aeabi_fmul+0x6a>
 800176e:	3301      	adds	r3, #1
 8001770:	e7d1      	b.n	8001716 <__aeabi_fmul+0x6a>
 8001772:	002c      	movs	r4, r5
 8001774:	9b00      	ldr	r3, [sp, #0]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d049      	beq.n	800180e <__aeabi_fmul+0x162>
 800177a:	2b03      	cmp	r3, #3
 800177c:	d100      	bne.n	8001780 <__aeabi_fmul+0xd4>
 800177e:	e07e      	b.n	800187e <__aeabi_fmul+0x1d2>
 8001780:	2500      	movs	r5, #0
 8001782:	0028      	movs	r0, r5
 8001784:	2b01      	cmp	r3, #1
 8001786:	d12e      	bne.n	80017e6 <__aeabi_fmul+0x13a>
 8001788:	23ff      	movs	r3, #255	; 0xff
 800178a:	05c0      	lsls	r0, r0, #23
 800178c:	05db      	lsls	r3, r3, #23
 800178e:	026d      	lsls	r5, r5, #9
 8001790:	4018      	ands	r0, r3
 8001792:	0a6d      	lsrs	r5, r5, #9
 8001794:	4328      	orrs	r0, r5
 8001796:	07d2      	lsls	r2, r2, #31
 8001798:	4310      	orrs	r0, r2
 800179a:	b005      	add	sp, #20
 800179c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800179e:	0c20      	lsrs	r0, r4, #16
 80017a0:	b2a4      	uxth	r4, r4
 80017a2:	0027      	movs	r7, r4
 80017a4:	0c2b      	lsrs	r3, r5, #16
 80017a6:	b2ad      	uxth	r5, r5
 80017a8:	436f      	muls	r7, r5
 80017aa:	435c      	muls	r4, r3
 80017ac:	4345      	muls	r5, r0
 80017ae:	4343      	muls	r3, r0
 80017b0:	192d      	adds	r5, r5, r4
 80017b2:	469c      	mov	ip, r3
 80017b4:	0c3b      	lsrs	r3, r7, #16
 80017b6:	195b      	adds	r3, r3, r5
 80017b8:	429c      	cmp	r4, r3
 80017ba:	d902      	bls.n	80017c2 <__aeabi_fmul+0x116>
 80017bc:	2080      	movs	r0, #128	; 0x80
 80017be:	0240      	lsls	r0, r0, #9
 80017c0:	4484      	add	ip, r0
 80017c2:	041c      	lsls	r4, r3, #16
 80017c4:	b2bf      	uxth	r7, r7
 80017c6:	19e7      	adds	r7, r4, r7
 80017c8:	01bc      	lsls	r4, r7, #6
 80017ca:	1e60      	subs	r0, r4, #1
 80017cc:	4184      	sbcs	r4, r0
 80017ce:	0c1b      	lsrs	r3, r3, #16
 80017d0:	0ebf      	lsrs	r7, r7, #26
 80017d2:	4463      	add	r3, ip
 80017d4:	433c      	orrs	r4, r7
 80017d6:	019b      	lsls	r3, r3, #6
 80017d8:	431c      	orrs	r4, r3
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	d52c      	bpl.n	8001838 <__aeabi_fmul+0x18c>
 80017de:	2301      	movs	r3, #1
 80017e0:	0860      	lsrs	r0, r4, #1
 80017e2:	401c      	ands	r4, r3
 80017e4:	4304      	orrs	r4, r0
 80017e6:	0008      	movs	r0, r1
 80017e8:	307f      	adds	r0, #127	; 0x7f
 80017ea:	2800      	cmp	r0, #0
 80017ec:	dd26      	ble.n	800183c <__aeabi_fmul+0x190>
 80017ee:	0763      	lsls	r3, r4, #29
 80017f0:	d004      	beq.n	80017fc <__aeabi_fmul+0x150>
 80017f2:	230f      	movs	r3, #15
 80017f4:	4023      	ands	r3, r4
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d000      	beq.n	80017fc <__aeabi_fmul+0x150>
 80017fa:	3404      	adds	r4, #4
 80017fc:	0123      	lsls	r3, r4, #4
 80017fe:	d503      	bpl.n	8001808 <__aeabi_fmul+0x15c>
 8001800:	3180      	adds	r1, #128	; 0x80
 8001802:	0008      	movs	r0, r1
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <__aeabi_fmul+0x1e0>)
 8001806:	401c      	ands	r4, r3
 8001808:	08e5      	lsrs	r5, r4, #3
 800180a:	28fe      	cmp	r0, #254	; 0xfe
 800180c:	ddbc      	ble.n	8001788 <__aeabi_fmul+0xdc>
 800180e:	2500      	movs	r5, #0
 8001810:	e00b      	b.n	800182a <__aeabi_fmul+0x17e>
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	03db      	lsls	r3, r3, #15
 8001816:	421d      	tst	r5, r3
 8001818:	d003      	beq.n	8001822 <__aeabi_fmul+0x176>
 800181a:	421c      	tst	r4, r3
 800181c:	d101      	bne.n	8001822 <__aeabi_fmul+0x176>
 800181e:	0025      	movs	r5, r4
 8001820:	9702      	str	r7, [sp, #8]
 8001822:	2080      	movs	r0, #128	; 0x80
 8001824:	9a02      	ldr	r2, [sp, #8]
 8001826:	03c0      	lsls	r0, r0, #15
 8001828:	4305      	orrs	r5, r0
 800182a:	20ff      	movs	r0, #255	; 0xff
 800182c:	e7ac      	b.n	8001788 <__aeabi_fmul+0xdc>
 800182e:	002c      	movs	r4, r5
 8001830:	9a03      	ldr	r2, [sp, #12]
 8001832:	e79f      	b.n	8001774 <__aeabi_fmul+0xc8>
 8001834:	003a      	movs	r2, r7
 8001836:	e79e      	b.n	8001776 <__aeabi_fmul+0xca>
 8001838:	0031      	movs	r1, r6
 800183a:	e7d4      	b.n	80017e6 <__aeabi_fmul+0x13a>
 800183c:	2301      	movs	r3, #1
 800183e:	2500      	movs	r5, #0
 8001840:	1a1b      	subs	r3, r3, r0
 8001842:	0028      	movs	r0, r5
 8001844:	2b1b      	cmp	r3, #27
 8001846:	dc9f      	bgt.n	8001788 <__aeabi_fmul+0xdc>
 8001848:	319e      	adds	r1, #158	; 0x9e
 800184a:	0025      	movs	r5, r4
 800184c:	408c      	lsls	r4, r1
 800184e:	40dd      	lsrs	r5, r3
 8001850:	1e63      	subs	r3, r4, #1
 8001852:	419c      	sbcs	r4, r3
 8001854:	4325      	orrs	r5, r4
 8001856:	076b      	lsls	r3, r5, #29
 8001858:	d004      	beq.n	8001864 <__aeabi_fmul+0x1b8>
 800185a:	230f      	movs	r3, #15
 800185c:	402b      	ands	r3, r5
 800185e:	2b04      	cmp	r3, #4
 8001860:	d000      	beq.n	8001864 <__aeabi_fmul+0x1b8>
 8001862:	3504      	adds	r5, #4
 8001864:	2380      	movs	r3, #128	; 0x80
 8001866:	0028      	movs	r0, r5
 8001868:	04db      	lsls	r3, r3, #19
 800186a:	4018      	ands	r0, r3
 800186c:	421d      	tst	r5, r3
 800186e:	d109      	bne.n	8001884 <__aeabi_fmul+0x1d8>
 8001870:	08ed      	lsrs	r5, r5, #3
 8001872:	e789      	b.n	8001788 <__aeabi_fmul+0xdc>
 8001874:	2580      	movs	r5, #128	; 0x80
 8001876:	2300      	movs	r3, #0
 8001878:	03ed      	lsls	r5, r5, #15
 800187a:	9302      	str	r3, [sp, #8]
 800187c:	e7d1      	b.n	8001822 <__aeabi_fmul+0x176>
 800187e:	0025      	movs	r5, r4
 8001880:	9202      	str	r2, [sp, #8]
 8001882:	e7ce      	b.n	8001822 <__aeabi_fmul+0x176>
 8001884:	2500      	movs	r5, #0
 8001886:	2001      	movs	r0, #1
 8001888:	e77e      	b.n	8001788 <__aeabi_fmul+0xdc>
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	f7ffffff 	.word	0xf7ffffff

08001890 <__aeabi_i2f>:
 8001890:	b570      	push	{r4, r5, r6, lr}
 8001892:	0004      	movs	r4, r0
 8001894:	1e05      	subs	r5, r0, #0
 8001896:	d00f      	beq.n	80018b8 <__aeabi_i2f+0x28>
 8001898:	17c3      	asrs	r3, r0, #31
 800189a:	18c5      	adds	r5, r0, r3
 800189c:	405d      	eors	r5, r3
 800189e:	0fc4      	lsrs	r4, r0, #31
 80018a0:	0028      	movs	r0, r5
 80018a2:	f000 f835 	bl	8001910 <__clzsi2>
 80018a6:	0002      	movs	r2, r0
 80018a8:	209e      	movs	r0, #158	; 0x9e
 80018aa:	1a80      	subs	r0, r0, r2
 80018ac:	2896      	cmp	r0, #150	; 0x96
 80018ae:	dc0a      	bgt.n	80018c6 <__aeabi_i2f+0x36>
 80018b0:	2a08      	cmp	r2, #8
 80018b2:	dd01      	ble.n	80018b8 <__aeabi_i2f+0x28>
 80018b4:	3a08      	subs	r2, #8
 80018b6:	4095      	lsls	r5, r2
 80018b8:	026b      	lsls	r3, r5, #9
 80018ba:	0a5b      	lsrs	r3, r3, #9
 80018bc:	05c0      	lsls	r0, r0, #23
 80018be:	4318      	orrs	r0, r3
 80018c0:	07e4      	lsls	r4, r4, #31
 80018c2:	4320      	orrs	r0, r4
 80018c4:	bd70      	pop	{r4, r5, r6, pc}
 80018c6:	2899      	cmp	r0, #153	; 0x99
 80018c8:	dd0b      	ble.n	80018e2 <__aeabi_i2f+0x52>
 80018ca:	2305      	movs	r3, #5
 80018cc:	0029      	movs	r1, r5
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	40d9      	lsrs	r1, r3
 80018d2:	0013      	movs	r3, r2
 80018d4:	331b      	adds	r3, #27
 80018d6:	409d      	lsls	r5, r3
 80018d8:	002b      	movs	r3, r5
 80018da:	1e5d      	subs	r5, r3, #1
 80018dc:	41ab      	sbcs	r3, r5
 80018de:	4319      	orrs	r1, r3
 80018e0:	000d      	movs	r5, r1
 80018e2:	2a05      	cmp	r2, #5
 80018e4:	dd01      	ble.n	80018ea <__aeabi_i2f+0x5a>
 80018e6:	1f53      	subs	r3, r2, #5
 80018e8:	409d      	lsls	r5, r3
 80018ea:	0029      	movs	r1, r5
 80018ec:	4e07      	ldr	r6, [pc, #28]	; (800190c <__aeabi_i2f+0x7c>)
 80018ee:	4031      	ands	r1, r6
 80018f0:	076b      	lsls	r3, r5, #29
 80018f2:	d004      	beq.n	80018fe <__aeabi_i2f+0x6e>
 80018f4:	230f      	movs	r3, #15
 80018f6:	402b      	ands	r3, r5
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d000      	beq.n	80018fe <__aeabi_i2f+0x6e>
 80018fc:	3104      	adds	r1, #4
 80018fe:	014b      	lsls	r3, r1, #5
 8001900:	d502      	bpl.n	8001908 <__aeabi_i2f+0x78>
 8001902:	209f      	movs	r0, #159	; 0x9f
 8001904:	4031      	ands	r1, r6
 8001906:	1a80      	subs	r0, r0, r2
 8001908:	08cd      	lsrs	r5, r1, #3
 800190a:	e7d5      	b.n	80018b8 <__aeabi_i2f+0x28>
 800190c:	fbffffff 	.word	0xfbffffff

08001910 <__clzsi2>:
 8001910:	211c      	movs	r1, #28
 8001912:	2301      	movs	r3, #1
 8001914:	041b      	lsls	r3, r3, #16
 8001916:	4298      	cmp	r0, r3
 8001918:	d301      	bcc.n	800191e <__clzsi2+0xe>
 800191a:	0c00      	lsrs	r0, r0, #16
 800191c:	3910      	subs	r1, #16
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	4298      	cmp	r0, r3
 8001922:	d301      	bcc.n	8001928 <__clzsi2+0x18>
 8001924:	0a00      	lsrs	r0, r0, #8
 8001926:	3908      	subs	r1, #8
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	4298      	cmp	r0, r3
 800192c:	d301      	bcc.n	8001932 <__clzsi2+0x22>
 800192e:	0900      	lsrs	r0, r0, #4
 8001930:	3904      	subs	r1, #4
 8001932:	a202      	add	r2, pc, #8	; (adr r2, 800193c <__clzsi2+0x2c>)
 8001934:	5c10      	ldrb	r0, [r2, r0]
 8001936:	1840      	adds	r0, r0, r1
 8001938:	4770      	bx	lr
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	02020304 	.word	0x02020304
 8001940:	01010101 	.word	0x01010101
	...
 800194c:	08000156 	.word	0x08000156
 8001950:	08000164 	.word	0x08000164
 8001954:	08000174 	.word	0x08000174
 8001958:	08000184 	.word	0x08000184
 800195c:	08000194 	.word	0x08000194
 8001960:	080001a2 	.word	0x080001a2
 8001964:	080001b2 	.word	0x080001b2
 8001968:	080001c2 	.word	0x080001c2
 800196c:	0800073e 	.word	0x0800073e
 8001970:	08000724 	.word	0x08000724
 8001974:	080006f4 	.word	0x080006f4
 8001978:	080006cc 	.word	0x080006cc
 800197c:	08000690 	.word	0x08000690
 8001980:	33323130 	.word	0x33323130
 8001984:	37363534 	.word	0x37363534
 8001988:	62613938 	.word	0x62613938
 800198c:	66656463 	.word	0x66656463
 8001990:	6a696867 	.word	0x6a696867
 8001994:	6e6d6c6b 	.word	0x6e6d6c6b
 8001998:	7271706f 	.word	0x7271706f
 800199c:	76757473 	.word	0x76757473
 80019a0:	7a797877 	.word	0x7a797877
 80019a4:	00000000 	.word	0x00000000
